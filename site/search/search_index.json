{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a mis apuntes","text":""},{"location":"tema1/","title":"\ud83d\udc68\u200d\ud83d\udcbb Tema 1: Desarrollo de Software","text":"<p>RA 1: Reconoce los elementos y herramientas que intervienen en el desarrollo de un programa inform\u00e1tico, analizando sus caracter\u00edsticas y las fases en las que act\u00faan hasta llegar a su puesta en funcionamiento.</p>"},{"location":"tema1/#criterios-de-evaluacion","title":"\ud83c\udfaf Criterios de evaluaci\u00f3n","text":"<p>\u2705 Se ha reconocido la relaci\u00f3n de los programas con los componentes del sistema inform\u00e1tico: memoria, procesador, perif\u00e9ricos, entre otros. \u2705 Se han identificado las fases de desarrollo de una aplicaci\u00f3n inform\u00e1tica. \u2705 Se han diferenciado los conceptos de c\u00f3digo fuente, objeto y ejecutable. \u2705 Se han reconocido las caracter\u00edsticas de la generaci\u00f3n de c\u00f3digo intermedio para su ejecuci\u00f3n en m\u00e1quinas virtuales. \u2705 Se han clasificado los lenguajes de programaci\u00f3n, identificando sus caracter\u00edsticas. \u2705 Se ha evaluado la funcionalidad ofrecida por las herramientas utilizadas en el desarrollo de software. \u2705 Se han identificado las caracter\u00edsticas y escenarios de uso de las metodolog\u00edas \u00e1giles de desarrollo de software.  </p>"},{"location":"tema1/#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<ol> <li>Concepto de programa inform\u00e1tico</li> <li>C\u00f3digo fuente, objeto y ejecutable</li> <li>Lenguajes de programaci\u00f3n y paradigmas</li> <li>Fases del desarrollo del software</li> <li>Herramientas y procesos de compilaci\u00f3n</li> <li>Metodolog\u00edas \u00e1giles</li> </ol> <p>\u00bfC\u00f3mo avanzar por el contenido?</p> <p>Utiliza el \u00edndice o las flechas de navegaci\u00f3n al final de cada p\u00e1gina para desplazarte por los distintos apartados de este tema.</p>"},{"location":"tema1/codigo/","title":"C\u00f3digo fuente, objeto y ejecutable","text":""},{"location":"tema1/codigo/#2-codigo-fuente-objeto-y-ejecutable","title":"\ud83d\udcbb 2. C\u00f3digo fuente, objeto y ejecutable","text":""},{"location":"tema1/codigo/#21-del-codigo-fuente-al-binario-fases-del-toolchain","title":"2.1 Del c\u00f3digo fuente al binario: fases del toolchain","text":"<p>Idea b\u00e1sica</p> <p>Los ordenadores solo entienden c\u00f3digo binario (0 y 1). Por eso, un programa escrito en lenguaje de alto nivel (C, Java, Python\u2026) necesita pasar por un proceso de traducci\u00f3n llamado toolchain.</p> <pre><code>flowchart LR\n  A[\"C\u00f3digo fuente (.c, .java, .py)\"]\n    --&gt; B[\"Compilador\"]\n    --&gt; C[\"C\u00f3digo objeto (.o, .obj)\"]\n    --&gt; D[\"Enlazador (linker)\"]\n    --&gt; E[\"Ejecutable final (.exe, ELF, Mach-O)\"]</code></pre>"},{"location":"tema1/codigo/#22-compilacion-ensamblado-y-enlazado","title":"2.2 Compilaci\u00f3n, ensamblado y enlazado","text":"<ul> <li>Compilaci\u00f3n: traduce el c\u00f3digo fuente a c\u00f3digo objeto (m\u00e1s cercano al binario).  </li> <li>Ensamblado: convierte instrucciones en c\u00f3digo m\u00e1quina definitivo.  </li> <li>Enlazado (link): une varios m\u00f3dulos y librer\u00edas en un \u00fanico ejecutable.</li> </ul> <p>Enlazado est\u00e1tico vs din\u00e1mico</p> <ul> <li>Est\u00e1tico: el ejecutable incluye todo dentro (m\u00e1s pesado, independiente).  </li> <li>Din\u00e1mico: el ejecutable llama a librer\u00edas externas (<code>.dll</code>, <code>.so</code>) en tiempo de ejecuci\u00f3n (m\u00e1s ligero, depende de ellas).  </li> </ul>"},{"location":"tema1/codigo/#23-codigo-objeto-y-formatos-comunes","title":"2.3 C\u00f3digo objeto y formatos comunes","text":"<ul> <li>Qu\u00e9 es: el resultado de la compilaci\u00f3n, a\u00fan no ejecutable por s\u00ed mismo.  </li> <li>Extensiones habituales: <code>.o</code> (Linux/Unix), <code>.obj</code> (Windows).  </li> <li>Contiene: instrucciones en binario + metadatos (s\u00edmbolos, direcciones).  </li> </ul>"},{"location":"tema1/codigo/#24-ejecutable-y-dependencias-en-tiempo-de-ejecucion","title":"2.4 Ejecutable y dependencias en tiempo de ejecuci\u00f3n","text":"<ul> <li>El ejecutable es el archivo que ya puedes abrir y ejecutar en tu sistema.  </li> <li>Puede depender de:</li> <li>Librer\u00edas del sistema (ej.: <code>msvcrt.dll</code>, <code>libc.so</code>).  </li> <li>Archivos de configuraci\u00f3n.  </li> <li>Recursos adicionales (im\u00e1genes, sonidos, bases de datos).</li> </ul> <p>Error com\u00fan</p> <p>Pensar que el <code>.exe</code> contiene todo lo necesario. En realidad, muchos programas fallan si falta alguna librer\u00eda externa.  </p>"},{"location":"tema1/codigo/#25-interpretado-vs-compilado-vs-jit","title":"2.5 Interpretado vs compilado vs JIT","text":"<ul> <li>Interpretado: el c\u00f3digo se traduce y ejecuta al vuelo (ej.: Python, JavaScript).   \u2192 M\u00e1s lento, pero flexible.  </li> <li>Compilado: se traduce antes de ejecutar (ej.: C, C++).   \u2192 M\u00e1s r\u00e1pido, pero menos flexible.  </li> <li>JIT (Just-in-time): mezcla ambos: compila \u201csobre la marcha\u201d lo que m\u00e1s se usa (ej.: Java con la JVM, C# con .NET).   \u2192 Buen equilibrio entre rendimiento y portabilidad.  </li> </ul>"},{"location":"tema1/codigo/#26-codigo-intermedio-y-maquinas-virtuales","title":"2.6 C\u00f3digo intermedio y m\u00e1quinas virtuales","text":"<p>Idea clave</p> <p>Algunos lenguajes no se traducen directamente a binario, sino a un c\u00f3digo intermedio (bytecode). Ese c\u00f3digo se ejecuta dentro de una m\u00e1quina virtual (VM).</p> <ul> <li>Java \u2192 se compila a bytecode \u2192 la JVM lo interpreta/compila JIT.  </li> <li>C# (.NET) \u2192 se compila a CIL \u2192 la CLR lo ejecuta.  </li> </ul> <pre><code>flowchart LR\n  Fuente[\"C\u00f3digo fuente (Java, C#)\"]\n    --&gt; Bytecode[\"C\u00f3digo intermedio (Bytecode, CIL)\"]\n    --&gt; VM[\"M\u00e1quina Virtual (JVM, CLR)\"]\n    --&gt; Binario[\"Ejecuci\u00f3n real en CPU\"]</code></pre> <p>AOT (Ahead-of-Time)</p> <p>Significa compilar antes de ejecutar, evitando la traducci\u00f3n en tiempo real. Ejemplo: GraalVM para Java.  </p>"},{"location":"tema1/codigo/#27-empaquetado-y-distribucion","title":"2.7 Empaquetado y distribuci\u00f3n","text":"<p>Un programa no siempre se entrega como un simple archivo <code>.exe</code>. Puede distribuirse de varias formas:</p> <ul> <li>Instaladores tradicionales: <code>.msi</code>, <code>.exe</code> en Windows, <code>.deb</code>/<code>.rpm</code> en Linux.  </li> <li>Bundling: incluir todas las dependencias dentro del paquete. Ejemplo: apps portables.  </li> <li>Contenedores: usar Docker para que el programa siempre tenga el mismo entorno.  </li> </ul> <p>Ejemplo cotidiano</p> <ul> <li>Un videojuego en PC \u2192 instalador cl\u00e1sico con recursos y librer\u00edas.  </li> <li>Una app en Android \u2192 archivo <code>.apk</code>.  </li> <li>Un servicio web moderno \u2192 dentro de un contenedor Docker.  </li> </ul>"},{"location":"tema1/concepto/","title":"Concepto de programa inform\u00e1tico","text":""},{"location":"tema1/concepto/#1-concepto-de-programa-informatico","title":"\ud83d\udc68\u200d\ud83d\udcbb 1. Concepto de programa inform\u00e1tico","text":""},{"location":"tema1/concepto/#11-definicion-y-proposito","title":"1.1 Definici\u00f3n y prop\u00f3sito","text":"<p>Definici\u00f3n breve</p> <p>Un programa inform\u00e1tico es un conjunto ordenado de instrucciones que, al ejecutarse en un ordenador a trav\u00e9s de su sistema operativo, transforma entradas (datos) en salidas (resultados) para resolver un problema concreto.</p>"},{"location":"tema1/concepto/#para-que-sirve","title":"\u00bfPara qu\u00e9 sirve?","text":"<ul> <li>Automatizar tareas repetitivas.</li> <li>Procesar y analizar datos para obtener informaci\u00f3n \u00fatil.</li> <li>Ofrecer servicios (una web, una app, una API).</li> <li>Controlar hardware (impresoras, sensores, robots\u2026).</li> <li>Ayudar a tomar decisiones (por ejemplo, calcular una media o recomendar contenidos).</li> </ul>"},{"location":"tema1/concepto/#como-lo-hace-entrada-proceso-salida","title":"C\u00f3mo lo hace (Entrada \u2192 Proceso \u2192 Salida)","text":"<ol> <li>Entrada: llegan datos (lo que escribes, un archivo, un clic, una lectura de un sensor\u2026).  </li> <li>Proceso: el programa aplica sus instrucciones (el \u201cc\u00f3mo\u201d).  </li> <li>Salida: devuelve un resultado (un n\u00famero, un mensaje, un documento, encender un LED\u2026).</li> </ol> <pre><code>flowchart LR\n  A[\"Entradas\n(datos, eventos)\nEj.: calificaciones, texto, clics, sensores\"]\n    --&gt; B[\"Programa\n(instrucciones)\nEj.: pasos que transforman las entradas\"]\n    --&gt; C[\"Salidas\n(resultados)\nEj.: numeros, mensajes, archivos,\nacciones en hardware\"]</code></pre> <p>Ejemplo: Nota media</p> <ul> <li>Entrada: notas de 5 asignaturas (6, 7, 8, 5, 9).  </li> <li>Proceso: sumar todo y dividir entre 5.  </li> <li>Salida: media = 7,0.</li> </ul>"},{"location":"tema1/concepto/#conceptos-clave","title":"Conceptos clave","text":"<p>Algoritmo vs. programa</p> <ul> <li>Algoritmo: procedimiento finito, preciso y no ambiguo que resuelve una clase de problemas.  </li> <li>Programa: implementaci\u00f3n concreta de un algoritmo en un lenguaje que un ordenador puede ejecutar.</li> </ul>"},{"location":"tema1/concepto/#ejemplo-encontrar-el-maximo-de-una-lista","title":"Ejemplo: encontrar el m\u00e1ximo de una lista","text":"Algoritmo (explicado) Programa en Java  <p>Problema. Dada una lista de n\u00fameros, queremos el mayor.</p> <p>Idea general. - Tomamos el primer valor como candidato a m\u00e1ximo. - Recorremos la lista de izquierda a derecha. - Si aparece un n\u00famero mayor que el candidato, lo sustituimos. - Al terminar, el candidato es el m\u00e1ximo.</p> <p>Detalles importantes. - La lista debe tener al menos un elemento. - Solo necesitamos una variable adicional. - Una comparaci\u00f3n por elemento \u2192 coste lineal.</p> <pre><code>public class MaximoLista {\n    public static int maximo(int[] a) {\n        int max = a[0];                 // candidato inicial\n        for (int i = 1; i &lt; a.length; i++) {\n            if (a[i] &gt; max) {           // \u00bfhay un n\u00famero mayor?\n                max = a[i];             // actualizamos el candidato\n            }\n        }\n        return max;                     // al final, max es el mayor\n    }\n\n    public static void main(String[] args) {\n        int[] numeros = {6, 7, 8, 5, 9};\n        int max = maximo(numeros);\n        System.out.println(\"M\u00e1ximo = \" + max); // -&gt; 9\n    }\n}\n</code></pre> <p>Errores habituales (a evitar)</p> <ul> <li> <p>\u274c Confundir datos de entrada con configuraci\u00f3n del programa.   Los datos de entrada son la informaci\u00f3n que el programa necesita para trabajar (ej.: n\u00fameros a sumar).   La configuraci\u00f3n son ajustes fijos que cambian el comportamiento del programa (ej.: idioma de la aplicaci\u00f3n).   \u2192 Si los mezclas, el programa puede dar resultados inesperados.  </p> </li> <li> <p>\u274c Pensar que un programa siempre tiene interfaz gr\u00e1fica.   Muchos programas funcionan sin ventanas: en consola, como scripts, o en segundo plano como servicios.   \u2192 Un programa no necesita \u201cpantalla bonita\u201d para ser \u00fatil.  </p> </li> <li> <p>\u274c Olvidar el papel del sistema operativo.   El programa no controla el hardware de forma directa: hace peticiones al sistema operativo.   \u2192 Si el SO no gestionara CPU, memoria o disco, los programas chocar\u00edan entre s\u00ed y el sistema se colapsar\u00eda.  </p> </li> </ul>"},{"location":"tema1/concepto/#12-tipos-de-programas-sistemas-aplicaciones-utilidades-y-servicios","title":"1.2 Tipos de programas: sistemas, aplicaciones, utilidades y servicios","text":"<p>Idea clave</p> <p>Los programas inform\u00e1ticos se pueden clasificar seg\u00fan su prop\u00f3sito. Esta clasificaci\u00f3n ayuda a entender qu\u00e9 papel cumple cada software dentro de un ordenador o en la red.</p>"},{"location":"tema1/concepto/#programas-de-sistema","title":"Programas de sistema","text":"<ul> <li>Qu\u00e9 son: software que conecta y gestiona el hardware.  </li> <li>Ejemplos: sistemas operativos (Windows, Linux, macOS), drivers, firmware.  </li> </ul> <p>Recuerda</p> <p>Sin un sistema operativo, el resto de programas no podr\u00edan ejecutarse.</p>"},{"location":"tema1/concepto/#aplicaciones","title":"Aplicaciones","text":"<ul> <li>Qu\u00e9 son: programas dise\u00f1ados para que el usuario final realice tareas concretas.  </li> <li>Ejemplos: navegador web, editor de texto, juego, app del tiempo, procesador de im\u00e1genes.  </li> </ul>"},{"location":"tema1/concepto/#utilidades","title":"Utilidades","text":"<ul> <li>Qu\u00e9 son: programas de apoyo que facilitan tareas t\u00e9cnicas o ayudan a mantener el sistema.  </li> <li>Ejemplos: antivirus, compresores (WinRAR, 7zip), limpiadores de disco, monitores de red.  </li> </ul>"},{"location":"tema1/concepto/#servicios","title":"Servicios","text":"<ul> <li>Qu\u00e9 son: programas que trabajan en segundo plano, sin necesidad de que el usuario los abra manualmente.  </li> <li>Ejemplos: servidor web (Apache, Nginx), base de datos (MySQL, MongoDB), servicio de copias autom\u00e1ticas.  </li> </ul> <p>Importante</p> <p>Un servicio no suele tener ventana ni icono. Est\u00e1 \u201cescuchando\u201d peticiones (por ejemplo desde Internet) y responde cuando hace falta.</p>"},{"location":"tema1/concepto/#resumen-en-tabla","title":"Resumen en tabla","text":"Tipo Para qu\u00e9 sirve Ejemplos  Sistema Gestiona hardware y recursos Windows, Linux, drivers  Aplicaci\u00f3n Ayuda al usuario a realizar tareas Word, Chrome, Minecraft  Utilidad Facilita el mantenimiento t\u00e9cnico Antivirus, WinRAR  Servicio Trabaja en segundo plano, atiende peticiones Servidor web, base de datos"},{"location":"tema1/concepto/#esquema-visual","title":"Esquema visual","text":""},{"location":"tema1/concepto/#13-programas-y-componentes-del-sistema-cpu-memoria-almacenamiento-es-red","title":"1.3 Programas y componentes del sistema: CPU, memoria, almacenamiento, E/S, red","text":"<p>Idea clave</p> <p>Un programa no habla directamente con el hardware. Lo hace a trav\u00e9s del sistema operativo, que act\u00faa como intermediario y reparte los recursos.</p>"},{"location":"tema1/concepto/#cpu-procesador","title":"CPU (procesador)","text":"<ul> <li>Qu\u00e9 hace: ejecuta las instrucciones del programa paso a paso.  </li> <li>Ejemplo mental: es como el cerebro del ordenador.  </li> <li>Importante: la velocidad de la CPU influye en la rapidez con que el programa responde.</li> </ul>"},{"location":"tema1/concepto/#memoria-ram","title":"Memoria RAM","text":"<ul> <li>Qu\u00e9 hace: guarda temporalmente datos e instrucciones mientras se usan.  </li> <li>Ejemplo mental: una mesa de trabajo: cuanto m\u00e1s grande, m\u00e1s cosas caben a la vez.  </li> <li>Detalle: cuando apagas el PC, la RAM se borra.</li> </ul>"},{"location":"tema1/concepto/#almacenamiento","title":"Almacenamiento","text":"<ul> <li>Qu\u00e9 hace: conserva la informaci\u00f3n de forma permanente (aunque apagues el ordenador).  </li> <li>Ejemplo mental: un archivador donde guardas documentos.  </li> <li>Tipos: discos duros (HDD), discos s\u00f3lidos (SSD).  </li> </ul>"},{"location":"tema1/concepto/#entradasalida-es","title":"Entrada/Salida (E/S)","text":"<ul> <li>Qu\u00e9 hace: permite la comunicaci\u00f3n con el exterior.  </li> <li>Ejemplos de entrada: teclado, rat\u00f3n, micr\u00f3fono, c\u00e1mara.  </li> <li>Ejemplos de salida: monitor, impresora, altavoces.  </li> </ul>"},{"location":"tema1/concepto/#red","title":"Red","text":"<ul> <li>Qu\u00e9 hace: conecta el ordenador con otros equipos para compartir informaci\u00f3n.  </li> <li>Ejemplo mental: como una carretera por la que circulan los datos.  </li> <li>Ejemplo: navegar por Internet, descargar un archivo, jugar en l\u00ednea.  </li> </ul>"},{"location":"tema1/concepto/#esquema-general","title":"Esquema general","text":"<pre><code>flowchart TB\n  Program[Programa / Proceso] --&gt;|\"Llamadas (peticiones)\"| SO[Sistema Operativo]\n  SO --&gt; CPU[CPU]\n  SO --&gt; RAM[Memoria RAM]\n  SO --&gt; DISK[Almacenamiento]\n  SO --&gt; IO[Dispositivos E/S]\n  SO --&gt; NET[Red]</code></pre> <p>Ejemplo cotidiano</p> <p>Piensa en ver un v\u00eddeo en YouTube:  </p> <ul> <li>CPU: procesa las instrucciones del reproductor.  </li> <li>RAM: guarda los datos del v\u00eddeo en reproducci\u00f3n.  </li> <li>Almacenamiento: puede guardar el v\u00eddeo descargado.  </li> <li>E/S: la pantalla muestra im\u00e1genes, los altavoces reproducen sonido.  </li> <li>Red: recibe los datos del v\u00eddeo desde Internet.  </li> </ul>"},{"location":"tema1/fases/","title":"Fases del desarrollo","text":""},{"location":"tema1/fases/#4-fases-del-desarrollo-del-software","title":"4. \ud83d\udee0 Fases del desarrollo del software","text":"<pre><code>graph TD;\n    A[An\u00e1lisis] --&gt; B[Dise\u00f1o];\n    B --&gt; C[Codificaci\u00f3n];\n    C --&gt; D[Pruebas];\n    D --&gt; E[Documentaci\u00f3n];\n    E --&gt; F[Explotaci\u00f3n];\n    F --&gt; G[Mantenimiento];</code></pre>"},{"location":"tema1/fases/#resumen-de-fases","title":"\ud83d\udccc Resumen de fases","text":"<ul> <li>An\u00e1lisis: Requisitos del cliente</li> <li>Dise\u00f1o: Arquitectura del software</li> <li>Codificaci\u00f3n: Programaci\u00f3n del sistema</li> <li>Pruebas: Validaci\u00f3n del funcionamiento</li> <li>Documentaci\u00f3n: Manuales y gu\u00edas</li> <li>Explotaci\u00f3n: Puesta en marcha</li> <li>Mantenimiento: Evoluci\u00f3n y correcci\u00f3n</li> </ul>"},{"location":"tema1/herramientas/","title":"Herramientas","text":""},{"location":"tema1/herramientas/#5-herramientas-y-procesos-de-compilacion","title":"5. \ud83d\udd27 Herramientas y procesos de compilaci\u00f3n","text":"<ul> <li>Editor de c\u00f3digo: VS Code, Sublime, etc.</li> <li>Compilador/Int\u00e9rprete: GCC, Python, Java</li> <li>Linker: Enlaza c\u00f3digo objeto</li> <li>Entornos integrados (IDE): Eclipse, NetBeans, Visual Studio</li> </ul> <p>\u00bfQu\u00e9 diferencias hay entre compilaci\u00f3n e interpretaci\u00f3n?</p> <p>La compilaci\u00f3n traduce todo el c\u00f3digo de una vez; la interpretaci\u00f3n lo ejecuta l\u00ednea a l\u00ednea.</p>"},{"location":"tema1/lenguajes/","title":"Lenguajes","text":""},{"location":"tema1/lenguajes/#3-lenguajes-de-programacion-y-paradigmas","title":"3. \ud83e\udde0 Lenguajes de programaci\u00f3n y paradigmas","text":""},{"location":"tema1/lenguajes/#tipos-de-lenguajes","title":"\ud83d\udcda Tipos de lenguajes","text":"<ul> <li>\ud83e\uddee Lenguaje m\u00e1quina</li> <li>\u2699\ufe0f Ensamblador</li> <li>\ud83d\udcbb Alto nivel (Python, Java, C++)</li> <li>\ud83c\udfa8 Visuales (Scratch, Blockly)</li> </ul>"},{"location":"tema1/lenguajes/#paradigmas-de-programacion","title":"\ud83e\udded Paradigmas de programaci\u00f3n","text":"<ul> <li>Programaci\u00f3n estructurada</li> <li>Programaci\u00f3n orientada a objetos</li> <li>Programaci\u00f3n funcional</li> <li>Programaci\u00f3n visual</li> </ul> <p>Consejo</p> <p>Cada paradigma se adapta a un tipo de problema y favorece un estilo de dise\u00f1o.</p>"}]}