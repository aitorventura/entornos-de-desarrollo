{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#entornos-de-desarrollo","title":"\ud83d\udcda Entornos de Desarrollo","text":"<p>Bienvenido al m\u00f3dulo Entornos de Desarrollo. Aqu\u00ed encontrar\u00e1s todos los temas organizados y enlazados, cada uno con sus criterios de evaluaci\u00f3n, resultados de aprendizaje y contenidos pr\u00e1cticos.  </p>"},{"location":"#objetivo-general","title":"\ud83c\udfaf Objetivo general","text":"<p>Desarrollar las competencias necesarias para crear, probar y mejorar software utilizando herramientas profesionales. </p> <p>A lo largo del m\u00f3dulo aprender\u00e1s a:  </p> <ul> <li>Comprender qu\u00e9 es un programa inform\u00e1tico y c\u00f3mo se ejecuta en un sistema.  </li> <li>Utilizar entornos de desarrollo (IDE) para editar y generar ejecutables.  </li> <li>Dise\u00f1ar y aplicar pruebas que verifiquen el correcto funcionamiento del software.  </li> <li>Mejorar la calidad del c\u00f3digo mediante refactorizaci\u00f3n, control de versiones e integraci\u00f3n continua.  </li> <li>Representar programas con diagramas UML (clases, actividades, estados, casos de uso) para planificar y comunicar mejor las soluciones.  </li> </ul> <p>En conjunto, el objetivo es que seas capaz de trabajar como desarrollador siguiendo buenas pr\u00e1cticas, con una visi\u00f3n completa del ciclo de vida del software.</p>"},{"location":"#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<p>\ud83d\udc68\u200d\ud83d\udcbb Tema 1: Desarrollo de Software</p> <ul> <li>Concepto de programa inform\u00e1tico </li> <li>C\u00f3digo fuente, objeto y ejecutable </li> <li>Lenguajes de programaci\u00f3n y paradigmas </li> <li>Fases del desarrollo del software </li> <li>Herramientas y procesos de compilaci\u00f3n </li> <li>Metodolog\u00edas \u00e1giles </li> </ul> \ud83d\udd12 Tema 2: Entornos Integrados de Desarrollo (Pr\u00f3ximamente) <ul> <li>Instalaci\u00f3n, uso y personalizaci\u00f3n  </li> <li>Edici\u00f3n de programas y generaci\u00f3n de ejecutables  </li> <li>Herramientas y automatizaci\u00f3n  </li> </ul> \ud83d\udd12 Tema 3: Verificaci\u00f3n y Pruebas de Programas (Pr\u00f3ximamente) <ul> <li>Planificaci\u00f3n y tipos de pruebas  </li> <li>Procedimientos y casos de prueba  </li> <li>Pruebas unitarias y autom\u00e1ticas  </li> <li>Documentaci\u00f3n de incidencias y dobles de prueba  </li> </ul> \ud83d\udd12 Tema 4: Optimizaci\u00f3n y Documentaci\u00f3n del C\u00f3digo (Pr\u00f3ximamente) <ul> <li>Refactorizaci\u00f3n y patrones comunes  </li> <li>Analizadores de c\u00f3digo  </li> <li>Control de versiones y repositorios  </li> <li>Documentaci\u00f3n e integraci\u00f3n continua  </li> </ul> \ud83d\udd12 Tema 5: Diagramas de Clases (Pr\u00f3ximamente) <ul> <li>Clases, atributos y m\u00e9todos  </li> <li>Relaciones (herencia, agregaci\u00f3n, composici\u00f3n, dependencia)  </li> <li>Herramientas UML  </li> <li>Generaci\u00f3n de c\u00f3digo e ingenier\u00eda inversa  </li> </ul> \ud83d\udd12 Tema 6: Diagramas de Comportamiento (Pr\u00f3ximamente) <ul> <li>Diagramas de secuencia y comunicaci\u00f3n  </li> <li>Diagramas de actividades  </li> <li>Diagramas de estados  </li> </ul> <p>C\u00f3mo navegar</p> <p>Puedes acceder a cada tema desde este \u00edndice o usando las flechas de navegaci\u00f3n al final de cada p\u00e1gina.</p>"},{"location":"tema1/","title":"Tema 1 - Introducci\u00f3n","text":""},{"location":"tema1/#tema-1-desarrollo-de-software","title":"\ud83d\udc68\u200d\ud83d\udcbb Tema 1: Desarrollo de Software","text":"<p>RA 1: Reconoce los elementos y herramientas que intervienen en el desarrollo de un programa inform\u00e1tico, analizando sus caracter\u00edsticas y las fases en las que act\u00faan hasta llegar a su puesta en funcionamiento.</p>"},{"location":"tema1/#criterios-de-evaluacion","title":"\ud83c\udfaf Criterios de evaluaci\u00f3n","text":"<p>\u2705 Se ha reconocido la relaci\u00f3n de los programas con los componentes del sistema inform\u00e1tico: memoria, procesador, perif\u00e9ricos, entre otros. \u2705 Se han identificado las fases de desarrollo de una aplicaci\u00f3n inform\u00e1tica. \u2705 Se han diferenciado los conceptos de c\u00f3digo fuente, objeto y ejecutable. \u2705 Se han reconocido las caracter\u00edsticas de la generaci\u00f3n de c\u00f3digo intermedio para su ejecuci\u00f3n en m\u00e1quinas virtuales. \u2705 Se han clasificado los lenguajes de programaci\u00f3n, identificando sus caracter\u00edsticas. \u2705 Se ha evaluado la funcionalidad ofrecida por las herramientas utilizadas en el desarrollo de software. \u2705 Se han identificado las caracter\u00edsticas y escenarios de uso de las metodolog\u00edas \u00e1giles de desarrollo de software.  </p>"},{"location":"tema1/#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<ol> <li>Concepto de programa inform\u00e1tico</li> <li>C\u00f3digo fuente, objeto y ejecutable</li> <li>Lenguajes de programaci\u00f3n y paradigmas</li> <li>Fases del desarrollo del software</li> <li>Herramientas y procesos de compilaci\u00f3n</li> <li>Metodolog\u00edas \u00e1giles</li> </ol> <p>\u00bfC\u00f3mo avanzar por el contenido?</p> <p>Utiliza el \u00edndice o las flechas de navegaci\u00f3n al final de cada p\u00e1gina para desplazarte por los distintos apartados de este tema.</p>"},{"location":"tema1/actividad_1_1/","title":"Actividad 1.1","text":""},{"location":"tema1/actividad_1_1/#actividad-11-del-problema-al-programa","title":"\ud83e\uddea Actividad 1.1: Del problema al programa","text":"<p>Objetivo</p> <p>Comprender c\u00f3mo un programa transforma entradas en salidas y qu\u00e9 papel juegan la CPU, la RAM y la E/S.</p>"},{"location":"tema1/actividad_1_1/#parte-a-identificar-eps-entrada-proceso-salida","title":"\ud83d\udd39 Parte A. Identificar EPS (Entrada \u2192 Proceso \u2192 Salida)","text":"Gupo presencialGrupo semipresencial <ol> <li>Ponte en pareja con un compa\u00f1ero.  </li> <li>Pensad en tres situaciones cotidianas (que se puedan relacionar con la inform\u00e1tica) donde haya claramente entrada, proceso y salida. Ejemplos (esos no valen):  <ul> <li>Cajero autom\u00e1tico.  </li> <li>Reproductor de m\u00fasica.  </li> <li>Calculadora del m\u00f3vil.  </li> </ul> </li> <li>Dibujad una tabla con columnas:  </li> </ol> Entrada Proceso Salida <p>\ud83d\udcf8 A\u00f1adid un esquema r\u00e1pido (a mano o con un diagrama simple) para representar el flujo.</p> <ol> <li>Piensa en tres situaciones cotidianas (que se puedan relacionar con la inform\u00e1tica) donde haya claramente entrada, proceso y salida. Ejemplos (esos no valen):  <ul> <li>Cajero autom\u00e1tico.  </li> <li>Reproductor de m\u00fasica.  </li> <li>Calculadora del m\u00f3vil.  </li> </ul> </li> <li>Dibuja una tabla con columnas:  </li> </ol> Entrada Proceso Salida <p>\ud83d\udcf8 A\u00f1ade un esquema r\u00e1pido (a mano o con un diagrama simple) para representar el flujo.</p>"},{"location":"tema1/actividad_1_1/#parte-b-relacionar-con-componentes","title":"\ud83d\udd39 Parte B. Relacionar con componentes","text":"<p>Para cada caso de la tabla, responde:</p> <ul> <li>\u00bfQu\u00e9 har\u00eda la CPU?  </li> <li>\u00bfQu\u00e9 datos guardar\u00edan en la RAM?  </li> <li>\u00bfQu\u00e9 papel tendr\u00eda la E/S?  </li> <li>\u00bfIntervendr\u00eda la red o el almacenamiento?</li> </ul>"},{"location":"tema1/actividad_1_1/#parte-c-mini-reto-practico","title":"\ud83d\udd39 Parte C. Mini-reto pr\u00e1ctico","text":"<p>Analiza este peque\u00f1o c\u00f3digo en Java e investiga y deduce d\u00f3nde estar\u00eda la entrada, proceso y salida:</p> Java<pre><code>import java.util.Scanner;\n\npublic class MediaNotas {\n    public static void main(String[] args) {\n        Scanner teclado = new Scanner(System.in);\n        int suma = 0;\n\n        for (int i = 1; i &lt;= 3; i++) {\n            System.out.print(\"Introduce una nota: \");\n            int n = teclado.nextInt();\n            suma += n;\n        }\n\n        double media = suma / 3.0;\n        System.out.println(\"La media es: \" + media);\n\n        teclado.close();\n    }\n}\n</code></pre> <ul> <li>\u00bfQu\u00e9 parte es entrada?  </li> <li>\u00bfQu\u00e9 hace el proceso?  </li> <li>\u00bfCu\u00e1l es la salida?  </li> </ul>"},{"location":"tema1/actividad_1_1/#entregable","title":"\u2705 Entregable","text":"<p>Un documento breve con:</p> <ul> <li>La tabla con los tres ejemplos.  </li> <li>Un diagrama sencillo de un caso.  </li> <li>Las respuestas sobre CPU, RAM, E/S, red y almacenamiento.  </li> <li>El an\u00e1lisis del programa en Java.  </li> </ul>"},{"location":"tema1/actividad_1_2/","title":"Actividad 1.2","text":""},{"location":"tema1/actividad_1_2/#actividad-12-compilar-e-interpretar-programas","title":"\ud83e\uddea Actividad 1.2: Compilar e interpretar programas","text":""},{"location":"tema1/actividad_1_2/#objetivo-de-la-actividad","title":"\ud83c\udfaf Objetivo de la actividad","text":"<p>Qu\u00e9 vas a aprender</p> <ul> <li>Compilar y ejecutar programas en C y Java.  </li> <li>Interpretar un script en Python.  </li> <li>Conocer y usar compiladores e int\u00e9rpretes: <code>gcc</code> (C), <code>python3</code> (Python), <code>javac/java</code> (Java).  </li> <li>Documentar el proceso con capturas de pantalla y una reflexi\u00f3n personal.  </li> </ul>"},{"location":"tema1/actividad_1_2/#entregables-esperados-antes-de-empezar","title":"\ud83d\udcf8 Entregables esperados (antes de empezar)","text":"<p>Para que no se te olvide, durante toda la actividad debes guardar estas capturas de pantalla:</p> <ol> <li>Instalaci\u00f3n de cada herramienta (<code>gcc</code>, <code>python3</code>, <code>java</code>).  </li> <li>Archivos creados (<code>ejemploC.c</code>, <code>ejemploPython.py</code>, <code>Ejemplo.java</code>).  </li> <li>C\u00f3digo fuente abierto en el editor (nano).  </li> <li>Compilaci\u00f3n en C y Java (comando + resultado).  </li> <li>Ejecuci\u00f3n de los tres programas en terminal (C, Python, Java).  </li> <li>Vista de la carpeta <code>ejemploscodigo</code> mostrando los ejecutables generados.  </li> <li>Documento final con tu explicaci\u00f3n y una conclusi\u00f3n personal sobre las diferencias entre compilar e interpretar.</li> </ol>"},{"location":"tema1/actividad_1_2/#herramientas-necesarias","title":"\ud83d\udee0\ufe0f Herramientas necesarias","text":"<ul> <li>M\u00e1quina virtual con Ubuntu instalado, puede ser Ubuntu Server o Desktop, recuerda que si utilizas una instancia EC2 solo podr\u00e1 ser Server.  </li> <li>Compilador C (gcc/MinGW).  </li> <li>Python 3.  </li> <li>JDK (Java Development Kit).</li> </ul> <p>Recuerda</p> <p>En el Aula Virtual tienes un tutorial para crear la m\u00e1quina virtual en Ubuntu. Si ya la tienes lista, puedes continuar directamente.</p>"},{"location":"tema1/actividad_1_2/#paso-1-crear-los-programas-de-ejemplo","title":"\ud83d\udd39 Paso 1. Crear los programas de ejemplo","text":"<p>Primero, crea la carpeta de trabajo y los archivos vac\u00edos (si tienes interfaz gr\u00e1fica no hace falta que uses los comandos):</p> Bash<pre><code>mkdir ejemploscodigo\ncd ejemploscodigo\ntouch ejemploC.c ejemploPython.py ejemploJava.java\n</code></pre> <p>Ahora edita cada archivo con <code>nano</code> u otro editor y pega el c\u00f3digo:</p> \ud83d\udc68\u200d\ud83d\udcbb Programa en C C<pre><code>/* Programa: Suma de dos n\u00fameros */\n#include &lt;stdio.h&gt;\n\nint main() {\n    int n1, n2, suma;\n\n    printf(\"\\n Introduzca primer numero (entero): \");\n    scanf(\"%d\", &amp;n1);\n\n    printf(\"\\n Introduzca segundo numero (entero): \");\n    scanf(\"%d\", &amp;n2);\n\n    suma = n1 + n2;\n    printf(\"\\n La suma es: %d\\n\", suma);\n\n    // Pausa\n    printf(\"\\n Presione Enter para salir...\");\n    getchar(); \n    getchar(); \n\n    return 0;\n}\n</code></pre> \ud83d\udc0d Programa en Python Python<pre><code># Programa: Suma de dos n\u00fameros \nn1 = int(input(\"Ingrese primer n\u00famero: \")) \nn2 = int(input(\"Ingrese segundo n\u00famero: \")) \nsuma = n1 + n2 \nprint(\"La suma es:\", suma) \n</code></pre> \u2615 Programa en Java Java<pre><code>import java.util.Scanner;\n\npublic class Ejemplo {\n    public static void main(String[] args) {\n        int n1, n2, suma;\n        Scanner teclado = new Scanner(System.in);\n\n        System.out.print(\"Introduce primer numero entero: \"); \n        n1 = teclado.nextInt();\n\n        System.out.print(\"Introduce segundo numero entero: \"); \n        n2 = teclado.nextInt();\n\n        suma = n1 + n2;\n        System.out.println(\"La suma es: \" + suma); \n\n        teclado.close(); \n    }\n}\n</code></pre> <p>\ud83d\udcf8 Capturas aqu\u00ed: </p> <ul> <li>Vista de la carpeta <code>ejemploscodigo</code> con los tres archivos.  </li> <li>Cada archivo abierto en nano u otro editor mostrando el c\u00f3digo escrito.  </li> </ul>"},{"location":"tema1/actividad_1_2/#paso-2-instalar-compiladores-e-interpretes","title":"\ud83d\udd39 Paso 2. Instalar compiladores e int\u00e9rpretes","text":"<p>Desde el terminal de la m\u00e1quina virtual:</p>"},{"location":"tema1/actividad_1_2/#a-instalar-compilador-c-gcc","title":"a) Instalar compilador C (gcc)","text":"Bash<pre><code>sudo apt update\nsudo apt upgrade\nsudo apt install gcc\n</code></pre>"},{"location":"tema1/actividad_1_2/#b-instalar-python","title":"b) Instalar Python","text":"Bash<pre><code>python3 --version\nsudo apt install python3\n</code></pre>"},{"location":"tema1/actividad_1_2/#c-instalar-jdk-java-development-kit","title":"c) Instalar JDK (Java Development Kit)","text":"Bash<pre><code>sudo apt search openjdk\nsudo apt install openjdk-17-jdk\njava -version\n</code></pre> <p>\ud83d\udcf8 Captura aqu\u00ed: </p> <ul> <li>Pantalla de instalaci\u00f3n de cada herramienta (gcc, python3, java).  </li> </ul>"},{"location":"tema1/actividad_1_2/#paso-3-compilar-e-interpretar-programas","title":"\ud83d\udd39 Paso 3. Compilar e interpretar programas","text":""},{"location":"tema1/actividad_1_2/#a-programa-en-c","title":"a) Programa en C","text":"Bash<pre><code>gcc ejemploC.c -o ejemploC.exe\n./ejemploC.exe\n</code></pre> <p>\ud83d\udcf8 Capturas aqu\u00ed: </p> <ul> <li>Comando de compilaci\u00f3n (<code>gcc</code>) y ejecutable generado.  </li> <li>Ejecuci\u00f3n del programa mostrando la suma en terminal.  </li> </ul>"},{"location":"tema1/actividad_1_2/#b-programa-en-python","title":"b) Programa en Python","text":"Bash<pre><code>python3 ejemploPython.py\n</code></pre> <p>\ud83d\udcf8 Capturas aqu\u00ed: </p> <ul> <li>Ejecuci\u00f3n del script en terminal pidiendo datos y mostrando resultado.  </li> </ul>"},{"location":"tema1/actividad_1_2/#c-programa-en-java","title":"c) Programa en Java","text":"<p>\u26a0\ufe0f Recuerda: el archivo debe llamarse como la clase p\u00fablica (<code>Ejemplo</code>).  </p> Bash<pre><code>mv ejemploJava.java Ejemplo.java\njavac Ejemplo.java\nls   # aparece Ejemplo.class (bytecode)\njava Ejemplo\n</code></pre> <p>\ud83d\udcf8 Capturas aqu\u00ed: </p> <ul> <li>Comando <code>javac</code> y el archivo <code>Ejemplo.class</code> generado.  </li> <li>Ejecuci\u00f3n del programa con <code>java Ejemplo</code> mostrando la suma.  </li> </ul>"},{"location":"tema1/actividad_1_2/#entregables-finales","title":"\u2705 Entregables finales","text":"<p>El resultado debe ser un documento \u00fanico en PDF o Word con:</p> <ol> <li>Capturas de instalaci\u00f3n de cada lenguaje (gcc, python3, java).  </li> <li>C\u00f3digo escrito en C, Python y Java.  </li> <li>Ejecuci\u00f3n en terminal de los tres programas.  </li> <li>Explicaci\u00f3n breve de los pasos seguidos.  </li> <li>Conclusi\u00f3n personal: diferencias entre compilar (C, Java) e interpretar (Python).</li> </ol>"},{"location":"tema1/actividad_1_3/","title":"Actividad 1.3","text":""},{"location":"tema1/actividad_1_3/#actividad-13-estructura-basica-de-un-programa-java-desde-consola-reto","title":"\ud83e\uddea Actividad 1.3: Estructura b\u00e1sica de un programa Java (desde consola) + Reto","text":""},{"location":"tema1/actividad_1_3/#objetivos-de-la-actividad","title":"\ud83c\udfaf Objetivos de la actividad","text":"<p>Al finalizar ser\u00e1s capaz de\u2026</p> <ul> <li>Reconocer la estructura m\u00ednima de un programa Java de consola.</li> <li>Explicar el papel del m\u00e9todo <code>main(String[] args)</code>.</li> <li>Compilar y ejecutar programas desde terminal (Ubuntu).</li> <li>Comprender lo esencial de paquetes (<code>package</code>) e imports de la librer\u00eda est\u00e1ndar.</li> <li>Aplicar lo aprendido en un reto final con dos clases en paquetes distintos.</li> <li>Preparar un documento con capturas que evidencien el proceso.</li> </ul> <p>\ud83d\uddb1\ufe0f \u00bfPuedo usar interfaz gr\u00e1fica?</p> <p>S\u00ed. Si tu VM tiene escritorio, puedes crear/editar archivos con el explorador y un editor gr\u00e1fico (por ejemplo, Gedit). La compilaci\u00f3n/ejecuci\u00f3n seguir\u00e1 haci\u00e9ndose en terminal.</p>"},{"location":"tema1/actividad_1_3/#referencia-minima-de-comandos-que-se-van-a-utilizar","title":"\ud83d\udcda Referencia m\u00ednima de comandos que se van a utilizar","text":"Text Only<pre><code>mkdir NOMBRE_CARPETA     \u2192 crea carpetas\ncd NOMBRE_CARPETA        \u2192 entra en una carpeta\ncd ..                    \u2192 sube a la carpeta anterior\nls                       \u2192 lista archivos de la carpeta actual\nnano ARCHIVO.java        \u2192 edita/crea un archivo en consola\njavac ARCHIVO.java       \u2192 compila un archivo\njavac -d clases RUTA.java\u2192 compila y deja .class en la carpeta \"clases\"\njava NombreClase         \u2192 ejecuta si NO tiene package\njava -cp clases paquete.Clase  \u2192 ejecuta si S\u00cd tiene package\n</code></pre>"},{"location":"tema1/actividad_1_3/#requisitos-previos","title":"\ud83d\udd27 Requisitos previos","text":"<ul> <li>Ubuntu con JDK instalado (incluye <code>javac</code> y <code>java</code>).</li> <li>Editor de consola opcional: <code>nano</code> o <code>vim</code>.</li> </ul> Bash<pre><code>java -version\njavac -version\n</code></pre>"},{"location":"tema1/actividad_1_3/#entregables-leelos-antes-de-empezar","title":"\ud83d\udce6 Entregables (l\u00e9elos ANTES de empezar)","text":"<ol> <li>Captura 1 \u2013 Comprobaci\u00f3n de <code>java</code> y <code>javac</code> en la terminal.  </li> <li>Captura 2 \u2013 Creaci\u00f3n, compilaci\u00f3n y ejecuci\u00f3n de <code>Mundo.java</code>.  </li> <li>Captura 3 \u2013 Ejecuci\u00f3n de Doce.java (tabla 12\u00d712).  </li> <li>Captura 4 \u2013 Ejecuci\u00f3n de Doce.java modificada (12\u00d710).  </li> <li>Captura 5 \u2013 Ejecuci\u00f3n de Catorce.java (14\u00d710).  </li> <li>Captura 6 \u2013 Compilaci\u00f3n y ejecuci\u00f3n de App.java con package <code>org.entornos.demo</code>.  </li> <li>Captura 7 \u2013 Compilaci\u00f3n y ejecuci\u00f3n de ListaNombres.java con import de la librer\u00eda est\u00e1ndar.  </li> <li> <p>Reto \u2013 Capturas:  </p> <ul> <li>R1: contenido de MatOps.java y CalculadoraApp.java con tus l\u00edneas <code>package</code> e <code>import</code>.  </li> <li>R2: compilaci\u00f3n de MatOps.java y CalculadoraApp.java.  </li> <li>R3: ejecuci\u00f3n correcta de <code>org.entornos.app.CalculadoraApp</code>.  </li> <li>R4: estructura de carpetas del reto (puedes usar <code>ls</code> en cada carpeta o <code>tree</code> si lo tienes). </li> </ul> </li> <li> <p>Conclusi\u00f3n breve \u2013 6\u201310 l\u00edneas: qu\u00e9 has aprendido, dificultades y dudas.</p> </li> </ol> <p>Entrega: un \u00fanico PDF con todas las capturas y comentarios.</p>"},{"location":"tema1/actividad_1_3/#1-como-es-un-programa-java-por-dentro","title":"1) \ud83d\udcd8 \u00bfC\u00f3mo es un programa Java por dentro?","text":"<p>Toda aplicaci\u00f3n de consola en Java empieza en el m\u00e9todo:</p> Java<pre><code>public static void main(String[] args)\n</code></pre> <ul> <li><code>public class NombreClase</code> \u2192 Define la clase. El archivo debe llamarse NombreClase.java.  </li> <li><code>{ \u2026 }</code> \u2192 Delimitan el bloque de la clase y del m\u00e9todo.  </li> <li><code>public static void main(String[] args)</code> \u2192 Punto de entrada del programa.  </li> <li><code>public</code>: visible desde fuera.  </li> <li><code>static</code>: pertenece a la clase, no a un objeto.  </li> <li><code>void</code>: no devuelve valor.  </li> <li><code>String[] args</code>: par\u00e1metros de l\u00ednea de comandos (no los usamos aqu\u00ed).  </li> <li><code>System.out.println(\"\u2026\")</code> \u2192 Imprime texto en la consola.</li> </ul>"},{"location":"tema1/actividad_1_3/#2-ejercicio-1-mundo","title":"2) \u270d\ufe0f Ejercicio 1 \u2014 Mundo","text":"<p>Crea, compila y ejecuta tu primer programa.</p>"},{"location":"tema1/actividad_1_3/#21-crear-la-carpeta-y-el-archivo","title":"2.1. Crear la carpeta y el archivo","text":"Bash<pre><code>mkdir actividad_java_1\ncd actividad_java_1\nnano Mundo.java\n</code></pre> <p>Pega este contenido y guarda (en nano: <code>Ctrl+O</code>, <code>Enter</code>, <code>Ctrl+X</code>):</p> Java<pre><code>public class Mundo {\n    public static void main(String[] args) {\n        System.out.println(\"\u00a1Hola mundo!\");\n    }\n}\n</code></pre>"},{"location":"tema1/actividad_1_3/#22-compilar-y-ejecutar","title":"2.2. Compilar y ejecutar","text":"Bash<pre><code>javac Mundo.java\njava Mundo\n</code></pre> <p>\u2705 Deber\u00edas ver:</p> Text Only<pre><code>\u00a1Hola mundo!\n</code></pre> <p>\ud83d\udcf8 Captura 2 \u2013 pantalla con compilaci\u00f3n y ejecuci\u00f3n.</p>"},{"location":"tema1/actividad_1_3/#3-ejercicio-2-doce-tabla-del-12-12","title":"3) \u270d\ufe0f Ejercicio 2 \u2014 Doce (tabla del 12 \u00d7 12)","text":"<p>Crea un programa que imprima la tabla del 12 hasta 12\u00d712.</p> Bash<pre><code>nano Doce.java\n</code></pre> Java<pre><code>public class Doce {\n    public static void main(String[] args) {\n        System.out.println(\"Tabla del 12 (hasta 12 x 12):\");\n        for (int i = 1; i &lt;= 12; i++) {\n            System.out.println(\"12 x \" + i + \" = \" + (12 * i));\n        }\n    }\n}\n</code></pre> <p>Compila y ejecuta:</p> Bash<pre><code>javac Doce.java\njava Doce\n</code></pre> <p>\ud83d\udcf8 Captura 3 \u2013 salida con la tabla 12\u00d712.</p>"},{"location":"tema1/actividad_1_3/#4-variaciones-guiadas","title":"4) \ud83d\udd27 Variaciones guiadas","text":""},{"location":"tema1/actividad_1_3/#41-doce-hasta-1210","title":"4.1. Doce hasta 12\u00d710","text":"<p>Edita Doce.java para que llegue solo a 10 y vuelve a compilar/ejecutar:</p> Bash<pre><code>javac Doce.java\njava Doce\n</code></pre> <p>\ud83d\udcf8 Captura 4 \u2013 tabla del 12 hasta 10.</p>"},{"location":"tema1/actividad_1_3/#42-catorce-hasta-1410","title":"4.2. Catorce hasta 14\u00d710","text":"<p>Crea un nuevo archivo Catorce.java (igual que Doce, pero con 14):</p> Bash<pre><code>nano Catorce.java\n</code></pre> Java<pre><code>public class Catorce {\n    public static void main(String[] args) {\n        System.out.println(\"Tabla del 14 (hasta 14 x 10):\");\n        for (int i = 1; i &lt;= 10; i++) {\n            System.out.println(\"14 x \" + i + \" = \" + (14 * i));\n        }\n    }\n}\n</code></pre> <p>Compila y ejecuta:</p> Bash<pre><code>javac Catorce.java\njava Catorce\n</code></pre> <p>\ud83d\udcf8 Captura 5 \u2013 salida con la tabla 14\u00d710.</p>"},{"location":"tema1/actividad_1_3/#5-teoria-esencial-sobre-packages-e-imports","title":"5) \ud83e\udded Teor\u00eda esencial sobre packages e imports","text":"<p>Idea clave</p> <ul> <li>Un package es un nombre de carpeta que agrupa clases relacionadas. <code>package a.b.c;</code> \u21d2 la clase est\u00e1 dentro de <code>a/b/c/</code> </li> <li>Un import permite usar clases de otros packages (por ejemplo, de la librer\u00eda est\u00e1ndar de Java).</li> </ul> <ul> <li>Regla 1: La primera l\u00ednea del archivo puede ser <code>package \u2026;</code> y debe coincidir con las carpetas donde guardas el <code>.java</code>.  </li> <li>Regla 2: Para ejecutar una clase con package, debes indicar el nombre completo (por ejemplo, <code>org.entornos.demo.App</code>) y usar <code>-cp</code> (classpath) para decir d\u00f3nde est\u00e1n las clases compiladas.</li> </ul>"},{"location":"tema1/actividad_1_3/#6-ejercicio-3-package-basico-orgentornosdemo","title":"6) \u2705 Ejercicio 3 \u2014 Package b\u00e1sico (<code>org.entornos.demo</code>)","text":"<p>Vamos a crear una clase con package paso a paso, usando comandos simples.</p>"},{"location":"tema1/actividad_1_3/#61-crear-la-estructura-de-carpetas","title":"6.1. Crear la estructura de carpetas","text":"Bash<pre><code>mkdir actividad_java_1_paquetes\ncd actividad_java_1_paquetes\n\nmkdir org\ncd org\nmkdir entornos\ncd entornos\nmkdir demo\ncd demo\nnano App.java\n</code></pre>"},{"location":"tema1/actividad_1_3/#62-codigo-de-appjava","title":"6.2. C\u00f3digo de <code>App.java</code>","text":"Java<pre><code>package org.entornos.demo;\n\npublic class App {\n    public static void main(String[] args) {\n        System.out.println(\"App con package org.entornos.demo\");\n    }\n}\n</code></pre>"},{"location":"tema1/actividad_1_3/#63-volver-al-directorio-base-y-compilarejecutar","title":"6.3. Volver al directorio base y compilar/ejecutar","text":"Bash<pre><code>cd ..\ncd ..\ncd ..\nmkdir clases\njavac -d clases org/entornos/demo/App.java\njava -cp clases org.entornos.demo.App\n</code></pre> <p>\ud83d\udcf8 Captura 6 \u2013 muestra la compilaci\u00f3n y la ejecuci\u00f3n de <code>App</code>.</p> <p>\ud83d\udca1 Opcional: si tienes <code>tree</code>, puedes mostrar la estructura de carpetas.</p>"},{"location":"tema1/actividad_1_3/#7-ejercicio-4-import-de-la-libreria-estandar","title":"7) \u2705 Ejercicio 4 \u2014 Import de la librer\u00eda est\u00e1ndar","text":"<p>Ahora, en el mismo package, creamos otra clase que importe una clase de la librer\u00eda est\u00e1ndar (<code>java.util.ArrayList</code>).</p>"},{"location":"tema1/actividad_1_3/#71-crear-el-archivo","title":"7.1. Crear el archivo","text":"Bash<pre><code>cd org\ncd entornos\ncd demo\nnano ListaNombres.java\n</code></pre>"},{"location":"tema1/actividad_1_3/#72-codigo-de-listanombresjava","title":"7.2. C\u00f3digo de <code>ListaNombres.java</code>","text":"Java<pre><code>package org.entornos.demo;\n\nimport java.util.ArrayList;\n\npublic class ListaNombres {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; nombres = new ArrayList&lt;String&gt;();\n        nombres.add(\"Ana\");\n        nombres.add(\"Luis\");\n        System.out.println(\"Nombres: \" + nombres);\n        System.out.println(\"Total: \" + nombres.size());\n    }\n}\n</code></pre>"},{"location":"tema1/actividad_1_3/#73-compilar-y-ejecutar","title":"7.3. Compilar y ejecutar","text":"Bash<pre><code>cd ..\ncd ..\ncd ..\njavac -d clases org/entornos/demo/ListaNombres.java\njava -cp clases org.entornos.demo.ListaNombres\n</code></pre> <p>\ud83d\udcf8 Captura 7 \u2013 compilaci\u00f3n y ejecuci\u00f3n de <code>ListaNombres</code>.</p>"},{"location":"tema1/actividad_1_3/#reto-final-dentro-de-la-actividad-13","title":"\ud83e\uddea Reto final (dentro de la Actividad 1.3)","text":""},{"location":"tema1/actividad_1_3/#dos-clases-packages-e-imports-tu-te-encargas-de-la-estructura-y-los-comandos","title":"Dos clases, packages e imports \u2014 t\u00fa te encargas de la estructura y los comandos","text":"<p>Importante: En este reto no se proporcionan comandos (<code>mkdir</code>, <code>javac</code>, <code>java</code>, etc.). Debes crear carpetas, escribir los <code>package</code> e <code>import</code>, compilar y ejecutar como ya aprendiste arriba.</p>"},{"location":"tema1/actividad_1_3/#objetivo-del-reto","title":"\ud83c\udfaf Objetivo del reto","text":"<ul> <li>Colocar clases en paquetes correctos creando su estructura de carpetas.</li> <li>Escribir las sentencias <code>package</code> e <code>import</code> necesarias.</li> <li>Compilar y ejecutar desde terminal usando classpath correctamente.</li> </ul>"},{"location":"tema1/actividad_1_3/#estructura-objetivo-tu-la-creas","title":"\ud83d\uddc2\ufe0f Estructura objetivo (t\u00fa la creas)","text":"Text Only<pre><code>actividad_java_1_reto/\n\u251c\u2500\u2500 org/\n\u2502   \u2514\u2500\u2500 entornos/\n\u2502       \u251c\u2500\u2500 app/      (CalculadoraApp.java)\n\u2502       \u2514\u2500\u2500 util/     (MatOps.java)\n\u2514\u2500\u2500 clases/           (salida de compilaci\u00f3n .class)\n</code></pre>"},{"location":"tema1/actividad_1_3/#clase-1-libreria-matopsjava","title":"\ud83e\udde9 Clase 1 (librer\u00eda): <code>MatOps.java</code>","text":"<p>Ruta sugerida: <code>org/entornos/util/MatOps.java</code> \ud83d\udc49 A\u00f1ade arriba la sentencia <code>package \u2026</code> correcta.</p> Java<pre><code>public class MatOps {\n    public static int suma(int a, int b) { return a + b; }\n    public static int mult(int a, int b) { return a * b; }\n    public static int resta(int a, int b) { return a - b; }\n}\n</code></pre>"},{"location":"tema1/actividad_1_3/#clase-2-app-calculadoraappjava","title":"\ud83d\ude80 Clase 2 (app): <code>CalculadoraApp.java</code>","text":"<p>Ruta sugerida: <code>org/entornos/app/CalculadoraApp.java</code> \ud83d\udc49 A\u00f1ade arriba el <code>package \u2026</code> correcto e importa <code>MatOps</code>.</p> Java<pre><code>public class CalculadoraApp {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 100;\n        System.out.println(\"Operando con \" + a + \" y \" + b);\n        System.out.println(\"Suma = \" + MatOps.suma(a, b));\n        System.out.println(\"Resta = \" + MatOps.resta(b, a));\n        System.out.println(\"Multiplicaci\u00f3n = \" + MatOps.mult(a, b));\n    }\n}\n</code></pre>"},{"location":"tema1/actividad_1_3/#lo-que-debes-hacer-tu","title":"\u2705 Lo que debes hacer t\u00fa","text":"<ol> <li>Crear la estructura de carpetas indicada.  </li> <li>Escribir los <code>package</code> correctos en los dos archivos.  </li> <li>Escribir el <code>import</code> necesario en <code>CalculadoraApp.java</code>.  </li> <li>Compilar ambas clases dejando los <code>.class</code> en <code>clases/</code>.  </li> <li>Ejecutar la aplicaci\u00f3n (<code>org.entornos.app.CalculadoraApp</code>).  </li> <li>Capturar R1\u2013R4 (ver Entregables arriba).</li> </ol> <p>Errores comunes</p> <ul> <li><code>class not found</code> al ejecutar \u2192 revisa classpath y el nombre cualificado.  </li> <li>Falla la compilaci\u00f3n \u2192 comprueba que el package coincide con la ruta de carpetas.  </li> <li>No encuentra <code>MatOps</code> \u2192 falta el import o no has compilado en el orden correcto.</li> </ul>"},{"location":"tema1/actividad_1_3/#entrega-final","title":"\ud83d\udcdd Entrega final","text":"<p>Sube a Aules un PDF \u00fanico con:  </p> <ul> <li>Las capturas 1\u20137 de los ejercicios guiados.  </li> <li>Las capturas R1\u2013R4 del reto final.  </li> <li>Una conclusi\u00f3n (6\u201310 l\u00edneas) explicando qu\u00e9 aprendiste, dificultades y dudas.</li> </ul>"},{"location":"tema1/actividad_1_4/","title":"Actividad 1.4","text":""},{"location":"tema1/actividad_1_4/#actividad-14-mapa-conceptual-minimo-del-ciclo-completo","title":"\ud83e\uddea Actividad 1.4: Mapa conceptual m\u00ednimo del ciclo completo","text":"<p>Objetivo</p> <p>Representar todas las fases (4.1\u20134.7) con un mapa a mano, anotando entradas, qu\u00e9 se hace en cada fase y salidas.</p>"},{"location":"tema1/actividad_1_4/#mapa-conceptual-a-mano","title":"Mapa conceptual a mano","text":"<ol> <li>En un A4, dibuja 7 nodos en l\u00ednea: 4.1 An\u00e1lisis \u2192 4.2 Dise\u00f1o \u2192 4.3 Implementaci\u00f3n \u2192 4.4 Pruebas \u2192 4.5 Despliegue \u2192 4.6 Operaci\u00f3n \u2192 4.7 Documentaci\u00f3n.</li> <li> <p>En cada nodo, escribe:</p> <ul> <li>\ud83d\udd35 Entradas.</li> <li>\u2699\ufe0f Proceso.</li> <li>\ud83d\udfe2 Salidas.</li> </ul> </li> </ol>"},{"location":"tema1/actividad_1_4/#plantilla-guia-opcional-para-boceto-rapido","title":"\ud83d\udcdd Plantilla gu\u00eda (opcional, para boceto r\u00e1pido)","text":"<p>Rell\u00e9nala primero y luego p\u00e1sala a tu mapa a mano. </p> Fase \ud83d\udd35 Entradas \u2699\ufe0f Proceso \ud83d\udfe2 Salidas 4.1 An\u00e1lisis 4.2 Dise\u00f1o 4.3 Implementaci\u00f3n 4.4 Pruebas 4.5 Despliegue 4.6 Operaci\u00f3n 4.7 Documentaci\u00f3n"},{"location":"tema1/actividad_1_4/#entregable","title":"\u2705 Entregable","text":"<ul> <li>\ud83d\udcf8 Foto n\u00edtida del mapa a mano (JPG/PNG).  </li> </ul>"},{"location":"tema1/actividad_1_5/","title":"Actividad 1.5","text":""},{"location":"tema1/actividad_1_5/#actividad-15-cuestionario","title":"\ud83e\uddea Actividad 1.5: Cuestionario","text":"<p>Objetivo</p> <p>Comprobar, de forma r\u00e1pida, que dominas los conceptos b\u00e1sicos del 1.5: Herramientas y procesos de construcci\u00f3n.</p>"},{"location":"tema1/actividad_1_5/#que-tienes-que-hacer","title":"\u25b6\ufe0f \u00bfQu\u00e9 tienes que hacer?","text":"<ul> <li>Cuestionario online disponible en el Aula Virtual de la asignatura: Actividad 1.5.</li> </ul> <p>Consulta en el Aula Virtual las fechas de apertura y cierre del cuestionario.</p>"},{"location":"tema1/actividad_1_6/","title":"Actividad 1.6","text":""},{"location":"tema1/actividad_1_6/#actividad-16-simula-una-empresa-y-ejecuta-sprints-en-jira","title":"\ud83e\uddea Actividad 1.6: Simula una empresa y ejecuta Sprints en Jira","text":"<p>Objetivo</p> <p>Simular una empresa y aplicar Scrum en Jira Cloud para entregar un incremento verificable.</p>"},{"location":"tema1/actividad_1_6/#parte-a-monta-la-empresa-y-prepara-jira","title":"\ud83d\udd39 Parte A. Monta la \u201cempresa\u201d y prepara Jira","text":"Grupo presencial (en grupo, 2 sprints)Grupo semipresencial (individual, 1 sprint) <ol> <li>Formad equipos de 3\u20135 personas. Elegid nombre de empresa y producto (web/app/bot).</li> <li>Definid 2 hitos (uno por sprint).  <ul> <li>Ejemplo: Sprint 1 \u2192 \u201cExplorar cat\u00e1logo y ver detalle\u201d; Sprint 2 \u2192 \u201cA\u00f1adir al carrito y confirmar pedido\u201d.</li> </ul> </li> <li>En Jira Cloud (Scrum administrado por el equipo):<ul> <li>Columnas: <code>Por hacer \u2192 En curso \u2192 Revisar/QA \u2192 Hecho</code>. Elige un WIP por columna.</li> <li>Cread \u00c9picas (3\u20136) y Historias (8\u201312) con criterios Given/When/Then.</li> <li>Estimad con Story Points y priorizad el Backlog (valor/risgo/dependencias).</li> </ul> </li> </ol> <ol> <li>Elige nombre de empresa y un producto m\u00ednimo (MVP) con un \u00fanico hito alcanzable en 1 sprint.</li> <li>En Jira:<ul> <li>Columnas: <code>Por hacer \u2192 En curso \u2192 Revisar/QA \u2192 Hecho</code>. Acordad WIP por columna.</li> <li>\u00c9picas (1\u20132) y Historias (5\u20137) con criterios Given/When/Then.</li> <li>Estima y ordena el Backlog (enfocado al hito \u00fanico).</li> </ul> </li> </ol> <p>Plantillas r\u00e1pidas - Historia </p>Text Only<pre><code>Como &lt;persona&gt;\nQuiero &lt;acci\u00f3n&gt;\nPara &lt;beneficio&gt;\n</code></pre> - Criterios Gherkin<pre><code>Dado &lt;contexto&gt;\nCuando &lt;acci\u00f3n&gt;\nEntonces &lt;resultado medible&gt;\n</code></pre>"},{"location":"tema1/actividad_1_6/#parte-b-sprint-1-planificacion-ejecucion-cierre","title":"\ud83d\udd39 Parte B. Sprint 1 (planificaci\u00f3n \u2192 ejecuci\u00f3n \u2192 cierre)","text":"<ol> <li>Sprint Planning (Jira \u2192 Backlog)<ul> <li><code>Crear sprint</code> y a\u00f1adir historias hasta la capacidad (usa los puntos).</li> <li>Escribe el Objetivo de Sprint en la cabecera (impacto para usuario).</li> <li>A\u00f1ade Subtareas (por ejemplo... UI/API/DB/QA) en las historias clave.</li> </ul> </li> <li>Ejecuci\u00f3n + Daily (Jira \u2192 Tablero)<ul> <li>10\u201315\u2019: abre el tablero, mueve tarjetas, marca impedimentos (\u2691) y ajusta el WIP.</li> </ul> </li> <li>Cierre<ul> <li>Sprint review: demo del incremento usando Sprint report.</li> <li>Retrospectiva: 1\u20132 mejoras del proceso; crea su issue para el siguiente sprint (si aplica).</li> </ul> </li> </ol>"},{"location":"tema1/actividad_1_6/#parte-c-sprint-2-solo-presencial","title":"\ud83d\udd39 Parte C. Sprint 2 (solo presencial)","text":"<ul> <li>Refinad el Backlog con el feedback del Sprint 1.  </li> <li>Planning con nuevo Objetivo y capacidad realista.  </li> <li>Ejecuci\u00f3n + Dailies aplicando la(s) mejora(s) de la retro.  </li> <li>Cierre con Review (demo + Sprint report) y Retro (nueva mejora).</li> </ul> <p>Semipresencial (individual): no hay Sprint 2. Aun as\u00ed, incluye lecciones aprendidas al final del sprint \u00fanico.</p>"},{"location":"tema1/actividad_1_6/#roles-y-organizacion","title":"Roles y organizaci\u00f3n","text":"<ul> <li>Presencial: asignad PO, SM y Equipo; pod\u00e9is rotar entre sprints.  </li> <li>Semipresencial (individual): asume los tres roles y expl\u00edcita en las actas qu\u00e9 decisiones tomar\u00edas como PO/SM.</li> </ul>"},{"location":"tema1/actividad_1_6/#entregable","title":"\u2705 Entregable","text":"Grupo presencialGrupo semipresencial <p>Dossier PDF con capturas y actas que incluya:</p> <ol> <li>Ficha de empresa (nombre, producto, objetivos por sprint).  </li> <li>Backlog (\u00e9picas, historias con criterios y estimaci\u00f3n).  </li> <li>Ejecuci\u00f3n de 2 sprints: objetivos, tablero a mitad/fin.</li> <li>Una historia ejemplo abierta con criterios, subtareas...</li> <li>Actas: Planning, Dailies (resumen), Review y Retro por sprint.  </li> <li>Conclusiones (puntos completados) + mejoras para un hipot\u00e9tico Sprint 3.</li> </ol> <p>Dossier breve con:</p> <ol> <li>Ficha de empresa y \u00fanico objetivo de sprint.  </li> <li>Backlog reducido (\u00e9picas/historias con criterios y puntos).  </li> <li>Tablero a mitad/fin. </li> <li>Una historia ejemplo abierta con criterios, subtareas...</li> <li>Actas breves (Planning, 2\u20133 Dailies, Review, Retro).  </li> <li>Conclusiones y 1 mejora aplicable a un futuro sprint.</li> </ol>"},{"location":"tema1/actividad_1_6/#actas-plantillas","title":"Actas (plantillas)","text":"<p>Planning (por sprint) </p>Text Only<pre><code>Objetivo de Sprint: &lt;impacto para usuario&gt;\nCapacidad estimada: &lt;puntos&gt; | Historias: &lt;PROY-123, PROY-124, ...&gt;\nCriterios de \u00e9xito: &lt;m\u00e9trica/umbral&gt;\nRiesgos y mitigaci\u00f3n: &lt;...&gt;\n</code></pre> <p>Daily (1 l\u00ednea/persona | individual: 1\u20132 l\u00edneas) </p>Text Only<pre><code>Ayer: &lt;...&gt; | Hoy: &lt;...&gt; | Bloqueos: &lt;...&gt; | Movimientos en Jira: &lt;issue -&gt; columna&gt;\n</code></pre> <p>Review </p>Text Only<pre><code>Incremento demostrado: &lt;qu\u00e9 se ha mostrado&gt;\nFeedback: &lt;...&gt;\nDecisiones: &lt;nuevas historias / cambios&gt;\n</code></pre> <p>Retrospectiva </p>Text Only<pre><code>Funcion\u00f3 bien: &lt;...&gt;\nPara mejorar: &lt;...&gt;\nCompromisos (pr\u00f3ximo sprint): &lt;tarea de mejora de proceso en Jira&gt;\n</code></pre>"},{"location":"tema1/actividad_1_6/#rubrica-orientativa","title":"\ud83d\udccf R\u00fabrica (orientativa)","text":"Criterio Insuficiente Aceptable Notable Excelente Backlog y estimaci\u00f3n Desordenado, sin criterios Historias con criterios b\u00e1sicos Bien priorizado y estimado Completo, trazable por \u00e9picas/etiquetas Ejecuci\u00f3n en Jira Pocas evidencias Flujo b\u00e1sico en tablero Flujo claro con WIP respetado Evidencias, PR/tests y DoD consistente Reuniones y actas Incompletas Todas presentes, simples Claras y accionables Gu\u00edan decisiones; mejoras aplicadas Informes Faltan Burndown o Sprint report Ambos presentes Uso para decidir y ajustar alcance Mejora continua No aparece 1 mejora superficial 1\u20132 mejoras aplicadas Mejora aplicada y observada entre sprints"},{"location":"tema1/codigo/","title":"C\u00f3digo fuente, objeto y ejecutable","text":""},{"location":"tema1/codigo/#2-codigo-fuente-objeto-y-ejecutable","title":"\ud83d\udcbb 2. C\u00f3digo fuente, objeto y ejecutable","text":"<p>Descarga de diapositivas</p> <p>Descarga las diapositivas</p>"},{"location":"tema1/codigo/#21-del-codigo-fuente-al-binario-como-llega-un-programa-a-la-cpu","title":"2.1 Del c\u00f3digo fuente al binario: \u00bfc\u00f3mo llega un programa a la CPU?","text":"<p>Idea b\u00e1sica</p> <p>Un ordenador solo entiende ceros y unos (binario). Los lenguajes que usamos para programar (C, Java, Python\u2026) deben traducirse hasta llegar a ese formato. Seg\u00fan el lenguaje, este \u201cviaje\u201d puede ser:  </p> <ul> <li>Compilado (todo antes de ejecutar).  </li> <li>Interpretado (l\u00ednea a l\u00ednea en el momento).  </li> <li>H\u00edbrido con m\u00e1quina virtual y JIT (un punto intermedio).  </li> </ul> \u26a1 Lenguaje compilado (C, C++)\ud83d\udcdd Lenguaje interpretado (Python, JS)\u23f1\ufe0f H\u00edbrido con VM (Java, C#) <p></p><pre><code>flowchart LR\nSRC[\"\u270d\ufe0f C\u00f3digo fuente (.c, .cpp)\"] --&gt; COMP[\"\u2699\ufe0f Compilador\"]\nCOMP --&gt; OBJ[\"\ud83d\udcc4 C\u00f3digo objeto (.o, .obj)\"]\nOBJ --&gt; LINK[\"\ud83d\udd17 Enlazador\"]\nLINK --&gt; EXE[\"\u25b6\ufe0f Ejecutable (.exe, ELF)\"]</code></pre> - El c\u00f3digo se traduce antes de ejecutarse. - Resultado: un ejecutable independiente que la CPU entiende directamente. - Ejemplo: programas de escritorio o videojuegos en C++.  <p></p><pre><code>flowchart LR\nSRC[\"\u270d\ufe0f C\u00f3digo fuente (.py, .js)\"] --&gt; INT[\"\ud83d\udc69\u200d\ud83d\udcbb Int\u00e9rprete\"]\nINT --&gt; RUN[\"\u25b6\ufe0f Ejecuci\u00f3n directa\"]</code></pre> - El c\u00f3digo se lee l\u00ednea a l\u00ednea en tiempo real. - No se genera un ejecutable cl\u00e1sico. - Ejemplo: scripts de Python, p\u00e1ginas web con JavaScript.  <p></p><pre><code>flowchart LR\nSRC[\"\u270d\ufe0f C\u00f3digo fuente\"] --&gt; COMP[\"\u2699\ufe0f Compilador\"]\nCOMP --&gt; BYTE[\"\ud83d\udcc4 Bytecode (Java .class, C# CIL)\"]\nBYTE --&gt; VM[\"\u2699\ufe0f M\u00e1quina Virtual (JVM / CLR)\"]\nVM --&gt; JIT[\"\u23f1\ufe0f Compilaci\u00f3n JIT\"]\nJIT --&gt; RUN[\"\u25b6\ufe0f Ejecuci\u00f3n en CPU\"]</code></pre> - El compilador genera un bytecode intermedio. - Ese bytecode se ejecuta dentro de una m\u00e1quina virtual. - La VM usa JIT para traducir lo m\u00e1s usado a binario real en tiempo de ejecuci\u00f3n. - Ejemplo: aplicaciones Android (Java/Kotlin)."},{"location":"tema1/codigo/#22-compilacion-ensamblado-y-enlazado-en-compilados","title":"2.2 Compilaci\u00f3n, ensamblado y enlazado (en compilados)","text":"<ul> <li>Compilaci\u00f3n \u2192 traduce el c\u00f3digo fuente a c\u00f3digo objeto (binario incompleto).  </li> <li>Ensamblado \u2192 organiza esas instrucciones en c\u00f3digo m\u00e1quina real.  </li> <li>Enlazado (link) \u2192 une todo (archivos objeto + librer\u00edas) para obtener el ejecutable final.</li> </ul> <p>Enlazado est\u00e1tico vs din\u00e1mico</p> <ul> <li> Est\u00e1tico \u2192 el ejecutable incluye todo. M\u00e1s grande, pero no necesita librer\u00edas externas.  </li> <li> Din\u00e1mico \u2192 el ejecutable depende de librer\u00edas externas (<code>.dll</code>, <code>.so</code>). M\u00e1s ligero, pero puede fallar si faltan.  </li> </ul>"},{"location":"tema1/codigo/#23-diferencia-entre-codigo-objeto-y-ejecutable","title":"2.3 Diferencia entre c\u00f3digo objeto y ejecutable","text":"\ud83d\udcc4 C\u00f3digo objeto\u25b6\ufe0f C\u00f3digo binario ejecutable <ul> <li>Archivo intermedio tras compilar.  </li> <li>Tiene instrucciones en binario, pero con marcas y s\u00edmbolos sin resolver.  </li> <li>Ejemplo: <code>programa.o</code> (Linux), <code>programa.obj</code> (Windows).  </li> <li>\u26a0\ufe0f No puede ejecutarse directamente.</li> </ul> <ul> <li>Archivo final que puedes abrir (<code>.exe</code>, ELF, Mach-O).  </li> <li>Ya tiene todas las direcciones resueltas y librer\u00edas enlazadas.  </li> <li>Ejemplo: <code>notepad.exe</code> en Windows, <code>/bin/ls</code> en Linux.  </li> <li>\u2705 La CPU lo entiende directamente.</li> </ul>"},{"location":"tema1/codigo/#24-ejecutable-y-dependencias","title":"2.4 Ejecutable y dependencias","text":"<p>Ejecutable</p> <p>Un ejecutable puede necesitar: </p> <ul> <li>Librer\u00edas (<code>libc.so</code>, <code>msvcrt.dll</code>).  </li> <li>Archivos de configuraci\u00f3n.  </li> <li>Recursos extra (im\u00e1genes, sonidos, bases de datos\u2026).  </li> </ul> <p>Error com\u00fan</p> <p>Creer que un <code>.exe</code> lo tiene todo dentro. En realidad, muchos programas fallan si falta una librer\u00eda externa.</p>"},{"location":"tema1/codigo/#25-interpretado-vs-compilado-vs-jit-resumen-general","title":"2.5 Interpretado vs compilado vs JIT (resumen general)","text":"Tipo C\u00f3mo funciona Ejemplo Pros Contras Interpretado El int\u00e9rprete lee y ejecuta el c\u00f3digo l\u00ednea a l\u00ednea, en tiempo real. Python, JavaScript + Flexible: se puede probar y modificar f\u00e1cilmente sin recompilar.  + Multiplataforma: el mismo script puede correr en Windows, Linux o macOS siempre que haya int\u00e9rprete. \u2013 M\u00e1s lento: porque cada instrucci\u00f3n se traduce al vuelo, no est\u00e1 preprocesada.  \u2013 Depende del int\u00e9rprete: sin \u00e9l, el programa no puede ejecutarse. Compilado Se traduce todo el programa de una vez a c\u00f3digo m\u00e1quina antes de ejecutarlo. C, C++ + Muy r\u00e1pido: la CPU ejecuta directamente el binario, sin pasos intermedios.  + Optimizable: el compilador puede aplicar mejoras (optimizaciones) en el binario. \u2013 Menos flexible: cualquier cambio en el c\u00f3digo obliga a recompilar.  \u2013 Menos portable: el binario generado suele funcionar solo en un sistema o arquitectura concreta. JIT (Just-in-time) El programa se compila primero a un c\u00f3digo intermedio (bytecode) y, en tiempo de ejecuci\u00f3n, la m\u00e1quina virtual traduce \u201cal vuelo\u201d las partes m\u00e1s usadas a binario. Java (JVM), C# (.NET) + Equilibrio: combina la portabilidad del bytecode con la velocidad del binario.  + Adaptable: el JIT optimiza seg\u00fan c\u00f3mo se ejecuta el programa en cada m\u00e1quina. \u2013 M\u00e1s complejo: necesita tanto un compilador como una m\u00e1quina virtual.  \u2013 Inicio m\u00e1s lento: al principio puede tardar m\u00e1s porque compila sobre la marcha."},{"location":"tema1/codigo/#26-codigo-intermedio-y-maquinas-virtuales","title":"2.6 C\u00f3digo intermedio y m\u00e1quinas virtuales","text":"<p>Idea clave</p> <p>Algunos lenguajes (Java, C#) no generan binario directo, sino un c\u00f3digo intermedio. Ese c\u00f3digo se ejecuta dentro de una m\u00e1quina virtual (VM).</p> \u2615 Java\ud83d\udd37 C# <ul> <li>El compilador genera bytecode (<code>.class</code>).  </li> <li>La JVM lo ejecuta.  </li> <li>Para acelerar, usa JIT que convierte a binario solo lo m\u00e1s repetido.</li> </ul> <ul> <li>El compilador genera CIL (Common Intermediate Language).  </li> <li>La CLR lo ejecuta.  </li> <li>Tambi\u00e9n usa JIT para mejorar rendimiento.</li> </ul> <p>AOT (Ahead-of-Time)</p> <p>Significa compilar antes de ejecutar, evitando JIT. Ejemplo: GraalVM para Java.  </p>"},{"location":"tema1/codigo/#27-empaquetado-y-distribucion","title":"2.7 Empaquetado y distribuci\u00f3n","text":"<p>Un programa no siempre llega como un \u00fanico archivo:</p> <ul> <li> Instaladores \u2192 <code>.exe</code>, <code>.msi</code> (Windows), <code>.deb</code>, <code>.rpm</code> (Linux).  </li> <li> Bundling \u2192 programa + dependencias (ej.: apps portables, Electron).  </li> <li> Contenedores \u2192 incluyen programa + librer\u00edas + mini SO (ej.: Docker).  </li> </ul> <p>Ejemplo cotidiano</p> <ul> <li>\ud83c\udfae Videojuego en PC \u2192 instalador cl\u00e1sico.  </li> <li>\ud83d\udcf1 App Android \u2192 archivo <code>.apk</code>.  </li> <li>\ud83c\udf10 Servicio web \u2192 contenedor Docker.</li> </ul>"},{"location":"tema1/concepto/","title":"Concepto de programa inform\u00e1tico","text":""},{"location":"tema1/concepto/#1-concepto-de-programa-informatico","title":"\ud83d\udc68\u200d\ud83d\udcbb 1. Concepto de programa inform\u00e1tico","text":"<p>Descarga de diapositivas</p> <p>Descarga las diapositivas</p>"},{"location":"tema1/concepto/#11-definicion-y-proposito","title":"1.1 Definici\u00f3n y prop\u00f3sito","text":"<p>Definici\u00f3n breve</p> <p>Un programa inform\u00e1tico es un conjunto ordenado de instrucciones que, al ejecutarse en un ordenador a trav\u00e9s de su sistema operativo, transforma entradas (datos) en salidas (resultados) para resolver un problema concreto.</p>"},{"location":"tema1/concepto/#para-que-sirve","title":"\u00bfPara qu\u00e9 sirve?","text":"<ul> <li>Automatizar tareas repetitivas.</li> <li>Procesar y analizar datos para obtener informaci\u00f3n \u00fatil.</li> <li>Ofrecer servicios (una web, una app, una API).</li> <li>Controlar hardware (impresoras, sensores, robots\u2026).</li> <li>Ayudar a tomar decisiones (por ejemplo, calcular una media o recomendar contenidos).</li> </ul>"},{"location":"tema1/concepto/#como-lo-hace-entrada-proceso-salida","title":"C\u00f3mo lo hace (Entrada \u2192 Proceso \u2192 Salida)","text":"<ol> <li>Entrada: llegan datos (lo que escribes, un archivo, un clic, una lectura de un sensor\u2026).  </li> <li>Proceso: el programa aplica sus instrucciones (el \u201cc\u00f3mo\u201d).  </li> <li>Salida: devuelve un resultado (un n\u00famero, un mensaje, un documento, encender un LED\u2026).</li> </ol> <pre><code>flowchart LR\n  A[\"Entradas\n(datos, eventos)\nEj.: calificaciones, texto, clics, sensores\"]\n    --&gt; B[\"Programa\n(instrucciones)\nEj.: pasos que transforman las entradas\"]\n    --&gt; C[\"Salidas\n(resultados)\nEj.: numeros, mensajes, archivos,\nacciones en hardware\"]</code></pre> <p>Ejemplo: Nota media</p> <ul> <li>Entrada: notas de 5 asignaturas (6, 7, 8, 5, 9).  </li> <li>Proceso: sumar todo y dividir entre 5.  </li> <li>Salida: media = 7,0.</li> </ul>"},{"location":"tema1/concepto/#conceptos-clave","title":"Conceptos clave","text":"<p>Algoritmo vs. programa</p> <ul> <li>Algoritmo: procedimiento finito, preciso y no ambiguo que resuelve una clase de problemas.  </li> <li>Programa: implementaci\u00f3n concreta de un algoritmo en un lenguaje que un ordenador puede ejecutar.</li> </ul>"},{"location":"tema1/concepto/#ejemplo-encontrar-el-maximo-de-una-lista","title":"Ejemplo: encontrar el m\u00e1ximo de una lista","text":"Algoritmo (explicado) Programa en Java  <p>Problema. Dada una lista de n\u00fameros, queremos el mayor.</p> <p>Idea general. - Tomamos el primer valor como candidato a m\u00e1ximo. - Recorremos la lista de izquierda a derecha. - Si aparece un n\u00famero mayor que el candidato, lo sustituimos. - Al terminar, el candidato es el m\u00e1ximo.</p> <p>Detalles importantes. - La lista debe tener al menos un elemento. - Solo necesitamos una variable adicional. - Una comparaci\u00f3n por elemento \u2192 coste lineal.</p> Java<pre><code>public class MaximoLista {\n    public static int maximo(int[] a) {\n        int max = a[0];                 // candidato inicial\n        for (int i = 1; i &lt; a.length; i++) {\n            if (a[i] &gt; max) {           // \u00bfhay un n\u00famero mayor?\n                max = a[i];             // actualizamos el candidato\n            }\n        }\n        return max;                     // al final, max es el mayor\n    }\n\n    public static void main(String[] args) {\n        int[] numeros = {6, 7, 8, 5, 9};\n        int max = maximo(numeros);\n        System.out.println(\"M\u00e1ximo = \" + max); // -&gt; 9\n    }\n}\n</code></pre> <p>Errores habituales (a evitar)</p> <ul> <li> <p>\u274c Confundir datos de entrada con configuraci\u00f3n del programa.   Los datos de entrada son la informaci\u00f3n que el programa necesita para trabajar (ej.: n\u00fameros a sumar).   La configuraci\u00f3n son ajustes fijos que cambian el comportamiento del programa (ej.: idioma de la aplicaci\u00f3n).   \u2192 Si los mezclas, el programa puede dar resultados inesperados.  </p> </li> <li> <p>\u274c Pensar que un programa siempre tiene interfaz gr\u00e1fica.   Muchos programas funcionan sin ventanas: en consola, como scripts, o en segundo plano como servicios.   \u2192 Un programa no necesita \u201cpantalla bonita\u201d para ser \u00fatil.  </p> </li> <li> <p>\u274c Olvidar el papel del sistema operativo.   El programa no controla el hardware de forma directa: hace peticiones al sistema operativo.   \u2192 Si el SO no gestionara CPU, memoria o disco, los programas chocar\u00edan entre s\u00ed y el sistema se colapsar\u00eda.  </p> </li> </ul>"},{"location":"tema1/concepto/#12-tipos-de-programas-sistemas-aplicaciones-utilidades-y-servicios","title":"1.2 Tipos de programas: sistemas, aplicaciones, utilidades y servicios","text":"<p>Idea clave</p> <p>Los programas inform\u00e1ticos se pueden clasificar seg\u00fan su prop\u00f3sito. Esta clasificaci\u00f3n ayuda a entender qu\u00e9 papel cumple cada software dentro de un ordenador o en la red.</p>"},{"location":"tema1/concepto/#programas-de-sistema","title":"Programas de sistema","text":"<ul> <li>Qu\u00e9 son: software que conecta y gestiona el hardware.  </li> <li>Ejemplos: sistemas operativos (Windows, Linux, macOS), drivers, firmware.  </li> </ul> <p>Recuerda</p> <p>Sin un sistema operativo, el resto de programas no podr\u00edan ejecutarse.</p>"},{"location":"tema1/concepto/#aplicaciones","title":"Aplicaciones","text":"<ul> <li>Qu\u00e9 son: programas dise\u00f1ados para que el usuario final realice tareas concretas.  </li> <li>Ejemplos: navegador web, editor de texto, juego, app del tiempo, procesador de im\u00e1genes.  </li> </ul>"},{"location":"tema1/concepto/#utilidades","title":"Utilidades","text":"<ul> <li>Qu\u00e9 son: programas de apoyo que facilitan tareas t\u00e9cnicas o ayudan a mantener el sistema.  </li> <li>Ejemplos: antivirus, compresores (WinRAR, 7zip), limpiadores de disco, monitores de red.  </li> </ul>"},{"location":"tema1/concepto/#servicios","title":"Servicios","text":"<ul> <li>Qu\u00e9 son: programas que trabajan en segundo plano, sin necesidad de que el usuario los abra manualmente.  </li> <li>Ejemplos: servidor web (Apache, Nginx), base de datos (MySQL, MongoDB), servicio de copias autom\u00e1ticas.  </li> </ul> <p>Importante</p> <p>Un servicio no suele tener ventana ni icono. Est\u00e1 \u201cescuchando\u201d peticiones (por ejemplo desde Internet) y responde cuando hace falta.</p>"},{"location":"tema1/concepto/#resumen-en-tabla","title":"Resumen en tabla","text":"Tipo Para qu\u00e9 sirve Ejemplos  Sistema Gestiona hardware y recursos Windows, Linux, drivers  Aplicaci\u00f3n Ayuda al usuario a realizar tareas Word, Chrome, Minecraft  Utilidad Facilita el mantenimiento t\u00e9cnico Antivirus, WinRAR  Servicio Trabaja en segundo plano, atiende peticiones Servidor web, base de datos"},{"location":"tema1/concepto/#esquema-visual","title":"Esquema visual","text":""},{"location":"tema1/concepto/#13-programas-y-componentes-del-sistema-cpu-memoria-almacenamiento-es-red","title":"1.3 Programas y componentes del sistema: CPU, memoria, almacenamiento, E/S, red","text":"<p>Idea clave</p> <p>Un programa no habla directamente con el hardware. Lo hace a trav\u00e9s del sistema operativo, que act\u00faa como intermediario y reparte los recursos.</p>"},{"location":"tema1/concepto/#cpu-procesador","title":"CPU (procesador)","text":"<ul> <li>Qu\u00e9 hace: ejecuta las instrucciones del programa paso a paso.  </li> <li>Ejemplo mental: es como el cerebro del ordenador.  </li> <li>Importante: la velocidad de la CPU influye en la rapidez con que el programa responde.</li> </ul>"},{"location":"tema1/concepto/#memoria-ram","title":"Memoria RAM","text":"<ul> <li>Qu\u00e9 hace: guarda temporalmente datos e instrucciones mientras se usan.  </li> <li>Ejemplo mental: una mesa de trabajo: cuanto m\u00e1s grande, m\u00e1s cosas caben a la vez.  </li> <li>Detalle: cuando apagas el PC, la RAM se borra.</li> </ul>"},{"location":"tema1/concepto/#almacenamiento","title":"Almacenamiento","text":"<ul> <li>Qu\u00e9 hace: conserva la informaci\u00f3n de forma permanente (aunque apagues el ordenador).  </li> <li>Ejemplo mental: un archivador donde guardas documentos.  </li> <li>Tipos: discos duros (HDD), discos s\u00f3lidos (SSD).  </li> </ul>"},{"location":"tema1/concepto/#entradasalida-es","title":"Entrada/Salida (E/S)","text":"<ul> <li>Qu\u00e9 hace: permite la comunicaci\u00f3n con el exterior.  </li> <li>Ejemplos de entrada: teclado, rat\u00f3n, micr\u00f3fono, c\u00e1mara.  </li> <li>Ejemplos de salida: monitor, impresora, altavoces.  </li> </ul>"},{"location":"tema1/concepto/#red","title":"Red","text":"<ul> <li>Qu\u00e9 hace: conecta el ordenador con otros equipos para compartir informaci\u00f3n.  </li> <li>Ejemplo mental: como una carretera por la que circulan los datos.  </li> <li>Ejemplo: navegar por Internet, descargar un archivo, jugar en l\u00ednea.  </li> </ul>"},{"location":"tema1/concepto/#esquema-general","title":"Esquema general","text":"<pre><code>flowchart TB\n  Program[Programa / Proceso] --&gt;|\"Llamadas (peticiones)\"| SO[Sistema Operativo]\n  SO --&gt; CPU[CPU]\n  SO --&gt; RAM[Memoria RAM]\n  SO --&gt; DISK[Almacenamiento]\n  SO --&gt; IO[Dispositivos E/S]\n  SO --&gt; NET[Red]</code></pre> <p>Ejemplo cotidiano</p> <p>Piensa en ver un v\u00eddeo en YouTube:  </p> <ul> <li>CPU: procesa las instrucciones del reproductor.  </li> <li>RAM: guarda los datos del v\u00eddeo en reproducci\u00f3n.  </li> <li>Almacenamiento: puede guardar el v\u00eddeo descargado.  </li> <li>E/S: la pantalla muestra im\u00e1genes, los altavoces reproducen sonido.  </li> <li>Red: recibe los datos del v\u00eddeo desde Internet.  </li> </ul>"},{"location":"tema1/fases/","title":"Fases del desarrollo","text":""},{"location":"tema1/fases/#4-fases-del-desarrollo-del-software","title":"\ud83e\udded 4. Fases del desarrollo del software","text":"<p>Descarga de diapositivas</p> <p>Descarga las diapositivas</p>"},{"location":"tema1/fases/#vision-general-del-ciclo","title":"\ud83d\uddfa\ufe0f Visi\u00f3n general del ciclo","text":"<p>Antes de escribir c\u00f3digo, un producto pasa por varias fases conectadas. Cada fase produce salidas (artefactos) que sirven de entrada a la siguiente. El ciclo no es completamente lineal: solemos iterar y volver atr\u00e1s cuando aparecen cambios o nueva informaci\u00f3n.</p> <pre><code>flowchart TB\n  A[Idea / Necesidad] --&gt; B[\"4.1 An\u00e1lisis de requisitos\"]\n  B --&gt; C[\"4.2 Dise\u00f1o \"]\n  C --&gt; D[\"4.3 Implementaci\u00f3n\"]\n  D --&gt; E[\"4.4 Pruebas \"]\n  E --&gt; G[\"4.5 Despliegue \"]\n  G --&gt; H[\"4.6 Operaci\u00f3n y mantenimiento \"]\n  H --&gt; I[\"4.7 Documentaci\u00f3n\"]\n  I --&gt;|feedback| B</code></pre> <p>Idea clave: cada fase reduce la incertidumbre y mejora la calidad del resultado. El objetivo no es \u201ccumplir etapas\u201d, sino entregar valor con seguridad y previsibilidad.</p>"},{"location":"tema1/fases/#41-analisis-de-requisitos-funcionales-no-funcionales-historias-de-usuario","title":"4.1 An\u00e1lisis de requisitos: funcionales / no funcionales; historias de usuario","text":"<p>El an\u00e1lisis transforma una necesidad en una lista de condiciones verificables que el software debe cumplir. Si esta fase es ambigua, todo lo posterior tambalea.</p> <ul> <li> <p> Prop\u00f3sito</p> <ul> <li>Alinear negocio \u2194 equipo t\u00e9cnico.</li> <li>Acotar alcance, riesgos y dependencias.</li> <li>Definir criterios de \u00e9xito medibles.</li> </ul> </li> <li> <p> Cu\u00e1ndo</p> <ul> <li>Al inicio de cada iteraci\u00f3n o proyecto.</li> <li>Antes de decisiones de arquitectura.</li> </ul> </li> </ul>"},{"location":"tema1/fases/#requisitos-funcionales-que-debe-hacer","title":"\u2705 Requisitos funcionales (\u00bfqu\u00e9 debe hacer?)","text":"<p>Describen las funciones del sistema: pantallas, reglas, flujos, validaciones\u2026 Ejemplo: \u201cEl sistema permite registrar usuarios con email y contrase\u00f1a\u201d.</p>"},{"location":"tema1/fases/#requisitos-no-funcionales-como-debe-ser","title":"\u2699\ufe0f Requisitos no funcionales (\u00bfc\u00f3mo debe ser?)","text":"<p>Definen calidades y restricciones: rendimiento, seguridad, accesibilidad, escalabilidad, cumplimiento legal (RGPD), usabilidad\u2026 Ejemplo: \u201cEl inicio de sesi\u00f3n debe responder en &lt; 300 ms para el 95% de peticiones\u201d.</p>"},{"location":"tema1/fases/#historias-de-usuario-que-son-cuando-y-para-que","title":"\u270d\ufe0f Historias de usuario: qu\u00e9 son, cu\u00e1ndo y para qu\u00e9","text":"<p>Una historia de usuario es una forma ligera de capturar una necesidad desde la perspectiva del usuario. Se usan en enfoques \u00e1giles para planificar, priorizar y probar funcionalidades. Se redactan al inicio y se refinan (grooming) continuamente.</p> <p>Formato recomendado</p> <p>Como tipo de usuario, quiero objetivo, para beneficio. Criterios de aceptaci\u00f3n (Given/When/Then) para verificar la historia.</p> <p>Ejemplo </p>Gherkin<pre><code>Historia: Recuperaci\u00f3n de contrase\u00f1a\n  Como cliente\n  Quiero restablecer mi contrase\u00f1a\n  Para recuperar acceso si la olvido\n\nCriterios de aceptaci\u00f3n:\n  Given estoy en \"Olvid\u00e9 mi contrase\u00f1a\"\n  When introduzco mi email y confirmo\n  Then recibo un enlace de recuperaci\u00f3n v\u00e1lido 30 minutos\n</code></pre> <p>Calidad de historias (INVEST)</p> <ul> <li>Independiente \u00b7 Negociable \u00b7 Valiosa \u00b7 Estimable \u00b7 Simple \u00b7 Testable</li> </ul> <p>Entradas \u2192 Salidas</p> <ul> <li>Entradas: objetivos de negocio, restricciones, normativa, stakeholders.</li> <li>Salidas: requisitos priorizados, historias con criterios, mockups y flujo de alto nivel.</li> </ul>"},{"location":"tema1/fases/#42-diseno-arquitectura-patrones-diagramas-uml-clases-casos-de-uso-actividad","title":"4.2 Dise\u00f1o: arquitectura, patrones, diagramas UML (clases, casos de uso, actividad)","text":"<p>\u00bfQu\u00e9 es el dise\u00f1o?</p> <p>Es el puente entre lo que queremos (requisitos) y c\u00f3mo lo construiremos (c\u00f3digo). Sirve para dividir el problema en piezas, acordar c\u00f3mo encajan y evitar sorpresas cuando programemos.</p>"},{"location":"tema1/fases/#objetivos-del-diseno","title":"\ud83c\udfaf Objetivos del dise\u00f1o","text":"<ul> <li>Elegir c\u00f3mo vamos a organizar el programa (en una pieza o por capas).</li> <li>Dise\u00f1ar diagramas (qu\u00e9 datos hay, qu\u00e9 pasos sigue un flujo).</li> <li>Escribir 2\u20133 decisiones clave (y por qu\u00e9), para recordarlas despu\u00e9s.</li> </ul>"},{"location":"tema1/fases/#arquitectura","title":"\ud83c\udfd7\ufe0f Arquitectura","text":"<p>Piensa en \u201cla forma\u201d de la aplicaci\u00f3n. Empezaremos con tres modelos f\u00e1ciles:</p> <ul> <li> Una sola pieza (monolito)<ul> <li>Todo va junto en una misma aplicaci\u00f3n.</li> <li>\u2705 F\u00e1cil de arrancar y entender.</li> <li>\ud83d\udca1 \u00datil para proyectos peque\u00f1os o primeras pr\u00e1cticas.</li> </ul> </li> <li> Por capas (3 capas)<ul> <li>Presentaci\u00f3n (lo que se ve) \u2192 L\u00f3gica (reglas) \u2192 Datos (base de datos/archivos).</li> <li>\u2705 Ordena el c\u00f3digo y separa responsabilidades.</li> <li>\ud83d\udca1 T\u00edpico en apps web o de escritorio sencillas.</li> </ul> </li> <li> Varias piezas que hablan (servicios)<ul> <li>La app se divide en varias partes que se env\u00edan mensajes.</li> <li>\u2705 Escala bien si crece mucho.</li> <li>\u26a0\ufe0f M\u00e1s avanzado: no lo necesitamos para empezar.</li> </ul> </li> </ul> <p>Diagrama simple de tres capas:</p> <pre><code>flowchart TB\n  UI[\"Presentaci\u00f3n&lt;br/&gt;(pantallas / terminal)\"]:::box\n  LOG[\"L\u00f3gica de negocio&lt;br/&gt;(validaciones, c\u00e1lculos)\"]:::box\n  DAT[\"Datos&lt;br/&gt;(BD / archivos)\"]:::box\n\n  UI --&gt; LOG --&gt; DAT\n</code></pre>"},{"location":"tema1/fases/#uml-para-elaborar-diagramas","title":"\ud83d\udcd0 UML para elaborar diagramas","text":"<p>UML son diagramas simples que nos permiten documentar el software. Usaremos solo lo esencial:</p> <p>1) Clases (qu\u00e9 datos hay y c\u00f3mo se relacionan)</p> <pre><code>classDiagram\n  class Carrito {\n    +agregar(producto: Producto, unidades: int)\n    +total(): decimal\n  }\n  class Producto {\n    +nombre: String\n    +precio: decimal\n  }\n  Carrito \"1\" o-- \"*\" Producto : contiene</code></pre> <ul> <li>Producto tiene nombre y precio.  </li> <li>Carrito puede agregar productos y calcular el total.</li> </ul> <p>2) Actividad (los pasos de un flujo) </p><pre><code>flowchart TD\n  S([Inicio]) --&gt; A[Usuario introduce email y contrase\u00f1a]\n  A --&gt; B{\u00bfSon correctos?}\n  B -- S\u00ed --&gt; C[Accede al sistema]\n  B -- No --&gt; D[Muestra error y vuelve a pedir]\n  D --&gt; A\n  C --&gt; E([Fin])</code></pre> - Representa decisiones y bucles (intento de login). <p>3) Casos de uso (qui\u00e9n usa qu\u00e9)</p> <ul> <li>Lista sencilla: \u201cRegistrar\u201d, \u201cIniciar sesi\u00f3n\u201d, \u201cA\u00f1adir al carrito\u201d, \u201cPagar\u201d.  </li> <li>Actor: qui\u00e9n lo hace (Cliente, Admin).  </li> <li>\ud83d\udca1 No hace falta dibujar ahora; con t\u00edtulos y actores ya aclaramos el alcance.</li> </ul>"},{"location":"tema1/fases/#que-entrego-al-acabar-el-diseno-minimo-util","title":"\ud83e\uddfe \u00bfQu\u00e9 entrego al acabar el dise\u00f1o (m\u00ednimo \u00fatil)?","text":"<ul> <li>Los diagramas elaborados.  </li> <li>Las decisiones tomadas: \u201cUsaremos 3 capas porque\u2026\u201d, \u201cLa l\u00f3gica de compra va aparte\u2026\u201d.  </li> </ul> <p>Pista para tus primeros ejercicios</p> <ul> <li>Empieza en monolito y tres capas (Presentaci\u00f3n/L\u00f3gica/Datos).  </li> <li>Dibuja solo lo que necesitas para ponerte de acuerdo.  </li> <li>Si dudas, prioriza claridad frente a \u201ct\u00e9cnicas avanzadas\u201d.</li> </ul> <p>Entradas \u2192 Salidas</p> <ul> <li>Entradas: requisitos priorizados e historias; restricciones y normativa; objetivos de calidad (rendimiento, seguridad, etc.).</li> <li>Salidas: diagramas UML m\u00ednimos; decisiones registradas (ADR); contratos de API/datos; prototipos o mockups acordados.</li> </ul>"},{"location":"tema1/fases/#43-implementacion-estilos-de-codigo-revisiones","title":"4.3 Implementaci\u00f3n: estilos de c\u00f3digo, revisiones","text":"<p>Objetivo: convertir el dise\u00f1o en c\u00f3digo que funciona y que cualquier compa\u00f1ero pueda leer y mantener.</p> <p>\u00bfQu\u00e9 es la implementaci\u00f3n?</p> <p>Es el paso donde tomamos los requisitos y el dise\u00f1o y los transformamos en archivos fuente (por ejemplo, <code>.java</code>) que el ordenador puede compilar y ejecutar. No es solo \u201chacer que funcione\u201d: tambi\u00e9n importa que el c\u00f3digo sea claro, coherente y seguro.</p>"},{"location":"tema1/fases/#principios-minimos-de-buena-implementacion","title":"\ud83e\udded Principios m\u00ednimos de buena implementaci\u00f3n","text":"<ol> <li> <p>Claridad por encima de \u201cingenio\u201d </p> <ul> <li>Nombres que expliquen qu\u00e9 hacen: <code>calcularTotalPedido</code>, <code>precioConIVA</code>.  </li> <li>Evita abreviaturas cr\u00edpticas.</li> </ul> </li> <li> <p>Una funci\u00f3n, una responsabilidad </p> <ul> <li>Si una funci\u00f3n hace muchas cosas, div\u00eddela en partes m\u00e1s peque\u00f1as con buenos nombres.</li> </ul> </li> <li> <p>No te repitas (DRY) </p> <ul> <li>Si copias y pegas c\u00f3digo, probablemente necesitas una funci\u00f3n reutilizable.</li> </ul> </li> <li> <p>Comentarios con intenci\u00f3n (el \u201cpor qu\u00e9\u201d) </p> <ul> <li>No comentes lo obvio; explica decisiones o reglas de negocio.</li> </ul> </li> <li> <p>Manejo b\u00e1sico de errores </p> <ul> <li>Comprueba entradas (p. ej., divisi\u00f3n por cero) y da mensajes \u00fatiles.</li> </ul> </li> <li> <p>Consistencia de estilo </p> <ul> <li>Misma indentaci\u00f3n, llaves y espacios en todo el proyecto.  </li> <li>Si es posible, usa formateador (p. ej., Checkstyle/Spotless en Java).</li> </ul> </li> </ol>"},{"location":"tema1/fases/#ejemplos-breves-en-java","title":"\u270f\ufe0f Ejemplos breves en Java","text":"<p>Nombres que cuentan una historia </p>Java<pre><code>// \u274c Poco claro\ndouble r = f(p, i);\n\n// \u2705 Claro\ndouble totalConImpuestos = calcularTotalPedido(precio, iva);\n</code></pre> <p>Una funci\u00f3n, una responsabilidad </p>Java<pre><code>// \u274c Mezcla validaciones, c\u00e1lculos y notificaciones\nvoid procesar(Pedido p) { /* muchas cosas aqu\u00ed */ }\n\n// \u2705 Separa tareas con nombres claros\nvoid procesar(Pedido p) {\n    validar(p);\n    double total = calcularTotal(p);\n    guardar(p, total);\n    notificarCliente(p);\n}\n</code></pre> <p>Comentarios que explican el porqu\u00e9 </p>Java<pre><code>// Evitamos dividir por cero: si b es 0 devolvemos 0 por pol\u00edtica de negocio\nint dividir(int a, int b) {\n    return (b == 0) ? 0 : a / b;\n}\n</code></pre> <p>Entradas \u2192 Salidas</p> <ul> <li>Entradas: requisitos claros y un dise\u00f1o sencillo (qu\u00e9 m\u00f3dulos habr\u00e1 y c\u00f3mo se comunican).</li> <li>Salidas: c\u00f3digo legible que compila y se ejecuta; instrucciones m\u00ednimas de c\u00f3mo ejecutar; casos de uso b\u00e1sicos probados (aunque sea manualmente).</li> </ul>"},{"location":"tema1/fases/#44-pruebas-unitarias-integracion-sistema-aceptacion-tddbdd","title":"4.4 Pruebas: unitarias, integraci\u00f3n, sistema, aceptaci\u00f3n; TDD/BDD","text":"<p>Las pruebas son experimentos controlados que hacemos al software para detectar errores pronto, mantener la calidad y poder cambiar con confianza.</p> <p>Idea clave</p> <p>Probar no es \u201cdesconfiar del c\u00f3digo\u201d, es aprender r\u00e1pido si algo funciona como esperamos. Cuanto antes pruebas, m\u00e1s barato es corregir.</p>"},{"location":"tema1/fases/#la-piramide-de-pruebas","title":"\ud83e\uddf1 La \u201cpir\u00e1mide\u201d de pruebas","text":"<pre><code>flowchart TB\n  U[\"Unitarias (muchas)\"] --&gt; I[\"Integraci\u00f3n (algunas)\"]\n  I --&gt; S[\"Sistema / E2E (pocas)\"]\n  S --&gt; A[\"Aceptaci\u00f3n (con negocio)\"]\n</code></pre> <ul> <li>M\u00e1s pruebas unitarias que de integraci\u00f3n, y muy pocas E2E.  </li> <li>Las unitarias son r\u00e1pidas y baratas; las E2E son lentas y fr\u00e1giles.</li> </ul>"},{"location":"tema1/fases/#tipos-de-prueba-con-ejemplos-sencillos","title":"\ud83e\uddea Tipos de prueba (con ejemplos sencillos)","text":"<ul> <li> <p> Unitarias \u00bfQu\u00e9 prueban? Una funci\u00f3n o clase aislada. Ejemplo: comprobar que <code>calcularTotal(10, 21%)</code> devuelve <code>12.1</code>. Objetivo: detectar fallos locales r\u00e1pido.  </p> </li> <li> <p> Integraci\u00f3n \u00bfQu\u00e9 prueban? El encaje entre piezas (funci\u00f3n + base de datos, servicio + API, etc.). Ejemplo: guardar un pedido y leerlo despu\u00e9s desde la BD de pruebas. Objetivo: verificar contratos y entradas/salidas reales.  </p> </li> <li> <p> Sistema / E2E \u00bfQu\u00e9 prueban? El flujo completo como lo ve el usuario. Ejemplo: \u201ccomprar\u201d un producto: login \u2192 carrito \u2192 pagar \u2192 confirmaci\u00f3n. Objetivo: comprobar que todo junto funciona.  </p> </li> <li> <p> Aceptaci\u00f3n (UAT) \u00bfQu\u00e9 prueban? Que se cumplen los requisitos acordados con negocio. Ejemplo: \u201cComo cliente, puedo restablecer contrase\u00f1a en menos de 30\u202fmin\u201d. Objetivo: validar valor para el usuario.</p> </li> </ul> <p>Cu\u00e1ndo ejecutar</p> <ul> <li>Cada vez que cambies c\u00f3digo.  </li> <li>Antes de entregar una tarea.  </li> <li>Siempre que arregles un bug (a\u00f1ade una prueba que lo reproduzca).</li> </ul>"},{"location":"tema1/fases/#tdd-pensar-con-pruebas-primero","title":"\ud83d\udd01 TDD: pensar con pruebas primero","text":"<p>TDD (Test\u2011Driven Development) propone este ciclo muy corto:</p> <ol> <li>Red \u2192 escribe una prueba peque\u00f1a que falle (todav\u00eda no hay c\u00f3digo).</li> <li>Green \u2192 escribe el m\u00ednimo c\u00f3digo para que pase.</li> <li>Refactor \u2192 mejora el dise\u00f1o, sin romper lo que ya pasa.</li> </ol> <p>Mini\u2011ejemplo mental</p> <p>1) Prueba: \u201c<code>suma(2,3)</code> debe devolver <code>5</code>\u201d \u2192 falla. 2) Implemento <code>suma(a,b)</code> \u2192 pasa. 3) Limpio nombres y casos borde \u2192 siguen en verde.</p>"},{"location":"tema1/fases/#bdd-comportamientos-en-lenguaje-comun","title":"\ud83e\uddfe BDD: comportamientos en lenguaje com\u00fan","text":"<p>BDD (Behavior\u2011Driven Development) describe comportamientos con un lenguaje cercano al negocio. Se usa a menudo para aceptaci\u00f3n.</p> <p>Formato Gherkin (ejemplo): </p>Gherkin<pre><code>Feature: Recuperar contrase\u00f1a\n  Scenario: Enlace v\u00e1lido\n    Given estoy en \"Olvid\u00e9 mi contrase\u00f1a\"\n    When introduzco mi email y confirmo\n    Then recibo un enlace v\u00e1lido durante 30 minutos\n</code></pre> <ul> <li>Given: contexto inicial. When: acci\u00f3n. Then: resultado esperado.</li> </ul>"},{"location":"tema1/fases/#buenas-practicas-para-principiantes","title":"\u2705 Buenas pr\u00e1cticas para principiantes","text":"<ul> <li>Una idea por prueba y nombres claros (qu\u00e9 esperas que pase).  </li> <li>Prepara datos propios en cada prueba (no dependas de los de otra).  </li> <li>Evita depender de Internet o servicios externos en unitarias.  </li> <li>Si algo es dif\u00edcil de probar, divide el problema en piezas m\u00e1s peque\u00f1as.  </li> <li>Cuando encuentres un bug, primero escribe la prueba que lo reproduce.</li> </ul> <p>Errores t\u00edpicos</p> <ul> <li>Demasiadas pruebas E2E y pocas unitarias \u2192 feedback lento.  </li> <li>Pruebas que dependen del orden o comparten estado \u2192 resultados impredecibles.  </li> <li>\u201cAprobar\u201d a mano sin criterios \u2192 la pr\u00f3xima persona no sabr\u00e1 qu\u00e9 validar.</li> </ul>"},{"location":"tema1/fases/#herramientas-por-si-las-necesitas-mas-adelante","title":"\ud83e\uddf0 Herramientas (por si las necesitas m\u00e1s adelante)","text":"<ul> <li>Java: JUnit (unitarias/integ.), Cucumber (BDD), Selenium (E2E web).  </li> <li>JavaScript: Jest/Testing Library (unit), Cypress/Playwright (E2E).  </li> <li>Python: pytest (unit/integr.).</li> </ul> <p>No es necesario instalarlas para entender este apartado; son referencias para cuando empieces a automatizar.</p> <p>Entradas \u2192 Salidas</p> <ul> <li>Entradas: requisitos y criterios de aceptaci\u00f3n; c\u00f3digo fuente y cambios propuestos; datos de prueba controlados; entorno de pruebas preparado.</li> <li>Salidas: lista de pruebas ejecutadas y su resultado (verde/rojo); notas de defectos detectados y c\u00f3mo se corrigieron; evidencias (capturas/logs) si se piden en la entrega.</li> </ul>"},{"location":"tema1/fases/#45-despliegue-on-prem-nube-movil-release-management","title":"4.5 Despliegue: on-prem, nube, m\u00f3vil; release management","text":"<p>Llevar el software desde \u201clisto para usar\u201d hasta \u201cen manos de los usuarios\u201d de forma segura y con plan de vuelta atr\u00e1s.</p>"},{"location":"tema1/fases/#modalidades-de-despliegue-vision-rapida","title":"\ud83c\udf0d Modalidades de despliegue (visi\u00f3n r\u00e1pida)","text":"Modalidad \u00bfD\u00f3nde vive tu app? Ventajas claras A tener en cuenta On-premises En tu propio servidor o CPD Control total, datos \u201cen casa\u201d Coste y tareas de sistema: backups, parches, monitorizaci\u00f3n Nube (IaaS/PaaS/FaaS) En proveedores (AWS, Azure, GCP\u2026) Elasticidad, servicios gestionados, pago por uso Dependes del proveedor, costes si crece sin control M\u00f3vil (Android/iOS) En tiendas (Play/App Store) Distribuci\u00f3n masiva y actualizaciones guiadas Firmas, revisiones de tienda, tiempos de aprobaci\u00f3n <p>Ejemplos t\u00edpicos</p> <ul> <li>Web est\u00e1tica: HTML/CSS/JS en un hosting/CDN.  </li> <li>Backend: API desplegada en un servicio gestionado (por ejemplo, una m\u00e1quina virtual o \u201cApp Service\u201d).  </li> <li>Escritorio: instalador firmado y actualizaciones autom\u00e1ticas.  </li> <li>M\u00f3vil: APK/IPA firmado y subido a tienda.</li> </ul>"},{"location":"tema1/fases/#estrategias-de-release","title":"\ud83d\udea6 Estrategias de release","text":""},{"location":"tema1/fases/#1-bluegreen-azulverde","title":"1) Blue/Green (Azul/Verde)","text":"<p>Imagina que tienes dos copias del mismo sistema: una es la azul (la que usan los usuarios ahora) y otra es la verde (vac\u00eda, lista para probar la nueva versi\u00f3n). Actualizas la verde y la pruebas. Si todo va bien, cambias el tr\u00e1fico de azul \u2192 verde.</p> <p>Ventajas</p> <ul> <li>Cambio casi instant\u00e1neo.</li> <li>Si hay fallos, vuelves a la azul y listo.</li> </ul> <p>Cu\u00e1ndo usarlo</p> <ul> <li>Cuando necesitas un cambio r\u00e1pido y seguro.</li> <li>Tienes recursos para mantener dos copias del sistema.</li> </ul>"},{"location":"tema1/fases/#2-canary-canario","title":"2) Canary (Canario)","text":"<p>Publicas la versi\u00f3n nueva a un % peque\u00f1o de usuarios (ej.: 5%). Si todo bien, subes al 20%, 50%\u2026 hasta el 100%.</p> <p>Ventajas</p> <ul> <li>Riesgo bajo: si algo falla, afecta a poca gente.</li> <li>Ves problemas reales pronto.</li> </ul> <p>Cu\u00e1ndo usarlo</p> <ul> <li>Cuando puedes dividir a tus usuarios por grupos.</li> <li>Quieres observar comportamiento real con poco riesgo.</li> </ul>"},{"location":"tema1/fases/#3-rolling-despliegue-gradual","title":"3) Rolling (Despliegue gradual)","text":"<p>Tienes varias \u201ccopias\u201d del sistema funcionando. Las vas actualizando una a una. Mientras actualizas una, las dem\u00e1s siguen atendiendo a los usuarios.</p> <p>Ventajas</p> <ul> <li>Evita cortes de servicio.</li> <li>No necesitas dos entornos completos (como en Blue/Green).</li> </ul> <p>Cu\u00e1ndo usarlo</p> <ul> <li>Cuando tu sistema tiene varias instancias (m\u00e1s de una m\u00e1quina/contendor).</li> <li>No te importa que el proceso tarde un poco m\u00e1s.</li> </ul>"},{"location":"tema1/fases/#versionado-semver-3-numeros-que-lo-dicen-todo","title":"Versionado SemVer (3 n\u00fameros que lo dicen todo)","text":"<p>Las versiones suelen tener tres n\u00fameros: MAJOR.MINOR.PATCH (por ejemplo, <code>2.4.7</code>).</p> <ul> <li>MAJOR (2.x.x): cambios grandes que pueden romper compatibilidad con versiones anteriores.</li> <li>MINOR (x.4.x): funciones nuevas que no rompen lo anterior.</li> <li>PATCH (x.x.7): arreglos de errores o mejoras peque\u00f1as.</li> </ul> <p>Ejemplos r\u00e1pidos</p> <ul> <li><code>1.3.5 \u2192 1.3.6</code>: arreglaste un bug (PATCH).  </li> <li><code>1.3.6 \u2192 1.4.0</code>: a\u00f1adiste una funci\u00f3n (MINOR).  </li> <li><code>1.4.0 \u2192 2.0.0</code>: cambi\u00f3 algo importante y hay que adaptar el uso (MAJOR).</li> </ul> <p>Buenas pr\u00e1cticas</p> <ul> <li>Acompa\u00f1a cada versi\u00f3n con un changelog (lista de cambios).</li> <li>Ten a mano un plan de vuelta atr\u00e1s (rollback) por si algo sale mal.</li> <li>Prueba la versi\u00f3n antes de darla a todos (canary o entorno verde).</li> </ul>"},{"location":"tema1/fases/#resumen","title":"\u2705 Resumen","text":"<ul> <li>Blue/Green: dos copias; cambias de una a otra r\u00e1pidamente.  </li> <li>Canary: primero pocos usuarios, luego todos.  </li> <li>Rolling: actualizas poco a poco, sin parar el servicio.  </li> <li>SemVer: <code>MAJOR.MINOR.PATCH</code> para que todos entiendan el tama\u00f1o del cambio.</li> </ul>"},{"location":"tema1/fases/#flujo-simple-de-un-despliegue","title":"\ud83d\udd04 Flujo simple de un despliegue","text":"<pre><code>flowchart TB\n  P[\"Preparar versi\u00f3n&lt;br/&gt;(build firmado)\"] --&gt; C[\"Configurar entorno&lt;br/&gt;(vars/secretos)\"]\n  C --&gt; D[\"Desplegar&lt;br/&gt;(blue/green, canary o rolling)\"]\n  D --&gt; V[\"Verificar&lt;br/&gt;(health checks, smoke tests)\"]\n  V --&gt; M[\"Monitorizar&lt;br/&gt;(errores y m\u00e9tricas)\"]\n  V --&gt;|falla| R[\"Rollback&lt;br/&gt;(volver a versi\u00f3n anterior)\"]\n</code></pre>"},{"location":"tema1/fases/#lista-de-comprobacion-antes-durante-despues","title":"\u2705 Lista de comprobaci\u00f3n (antes / durante / despu\u00e9s)","text":"<p>Antes</p> <ul> <li>Configuraci\u00f3n y secretos preparados (sin subirlos al repo).  </li> <li>Copia de seguridad y/o plan de migraci\u00f3n de BD.  </li> <li>Notas de versi\u00f3n y cambios destacados (changelog).  </li> </ul> <p>Durante</p> <ul> <li>Activar mantenimiento si aplica (mensaje claro al usuario).  </li> <li>Ejecutar smoke tests: entrar, crear algo, listar, borrar (lo m\u00ednimo).  </li> <li>Revisar health checks y logs de arranque.</li> </ul> <p>Despu\u00e9s</p> <ul> <li>Vigilar errores y m\u00e9tricas (latencia, tasa de error) los primeros minutos.  </li> <li>Confirmar funcionalidades clave con un recorrido corto.  </li> <li>Comunicar finalizaci\u00f3n y pr\u00f3ximos pasos (por ejemplo, cu\u00e1ndo se har\u00e1 el siguiente despliegue).</li> </ul>"},{"location":"tema1/fases/#rollback-plan-de-vuelta-atras","title":"\ud83e\uddef Rollback (plan de vuelta atr\u00e1s)","text":"<p>Opciones comunes</p> <ul> <li>Volver de Blue a Green (o al rev\u00e9s).  </li> <li>Reinstalar la versi\u00f3n anterior empaquetada.  </li> <li>Deshacer migraciones (si son reversibles) o tener backup para restaurar.  </li> <li>Desactivar cambios con feature flags (si los usas). Las feature flags son interruptores en el c\u00f3digo que te permiten encender o apagar una funcionalidad sin volver a desplegar. Si la novedad da problemas, apagas solo esa parte y el resto del sistema sigue funcionando. Adem\u00e1s, puedes probarla con un % de usuarios primero y ampliarlo si todo va bien (las flags suelen controlarse por configuraci\u00f3n o un servicio remoto).</li> </ul> <p>Errores frecuentes</p> <ul> <li>Hacer un despliegue sin plan de rollback.  </li> <li>Olvidar la base de datos en el plan (migraciones irreversibles).  </li> <li>No comprobar configuraciones por entorno (producci\u00f3n \u2260 desarrollo).</li> </ul> <p>Entradas \u2192 Salidas</p> <ul> <li>Entradas: build aprobado, configuraci\u00f3n/secretos, instrucciones de despliegue.</li> <li>Salidas: versi\u00f3n publicada; changelog/notas; rollback verificado y m\u00e9tricas iniciales revisadas.</li> </ul>"},{"location":"tema1/fases/#46-operacion-y-mantenimiento-logging-metricas-tracing-observabilidad","title":"\ud83d\udee0\ufe0f 4.6 Operaci\u00f3n y mantenimiento: logging, m\u00e9tricas, tracing, observabilidad","text":"<p>Una vez que el software est\u00e1 en producci\u00f3n, el trabajo no termina: hay que vigilarlo, resolver incidencias y mejorarlo. A esto lo llamamos operaci\u00f3n y mantenimiento. El objetivo es que las personas usuarias reciban un buen servicio (r\u00e1pido, disponible y seguro) y que el equipo pueda detectar problemas a tiempo.</p>"},{"location":"tema1/fases/#observabilidad-ver-lo-que-pasa-por-dentro","title":"\ud83d\udc40 Observabilidad: ver lo que pasa por dentro","text":"<p>Observabilidad es la capacidad de entender qu\u00e9 ocurre en el sistema usando sus se\u00f1ales. Nos apoyamos en cuatro tipos de se\u00f1ales principales:</p>"},{"location":"tema1/fases/#1-logs-registros","title":"1) Logs (registros)","text":"<ul> <li>Qu\u00e9 son: mensajes de texto que el sistema escribe cuando pasa algo (inicio, error, dato procesado\u2026).  </li> <li>Para qu\u00e9 sirven: reconstruir lo ocurrido ante un problema.  </li> <li>Buenas pr\u00e1cticas: niveles (<code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>) y formato consistente (idealmente estructurado/JSON).</li> </ul> JSON<pre><code>{\"nivel\":\"error\",\"mensaje\":\"No se pudo guardar el pedido\",\"pedidoId\":1234,\"causa\":\"timeout\"}\n</code></pre>"},{"location":"tema1/fases/#2-metricas","title":"2) M\u00e9tricas","text":"<ul> <li>Qu\u00e9 son: n\u00fameros que se miden a intervalos (por ejemplo, tiempo de respuesta, n\u00ba de errores, usuarios activos).  </li> <li>Tipos comunes: contadores (suben), gauges (suben/bajan), histogramas (distribuci\u00f3n de tiempos).  </li> <li> <p>Ejemplos \u00fatiles: </p> <ul> <li>Latencia media y p95 (el 95% de peticiones son m\u00e1s r\u00e1pidas que X ms).  </li> <li>Errores por minuto.  </li> <li>Uso de CPU/RAM.</li> </ul> </li> </ul>"},{"location":"tema1/fases/#3-tracing-distribuido","title":"3) Tracing distribuido","text":"<ul> <li>Qu\u00e9 es: seguimiento de una misma petici\u00f3n cuando pasa por varios servicios (A \u2192 B \u2192 C).  </li> <li>Para qu\u00e9 sirve: localizar d\u00f3nde se pierde tiempo o d\u00f3nde falla.  </li> <li>Truco pr\u00e1ctico: a\u00f1ade un ID de correlaci\u00f3n a cada petici\u00f3n y prop\u00e1galo entre servicios.</li> </ul>"},{"location":"tema1/fases/#4-eventos-perfiles","title":"4) Eventos / perfiles","text":"<ul> <li>Eventos: se\u00f1ales de cosas concretas que han ocurrido (ej.: \u201cpedido_creado\u201d).  </li> <li>Perfiles: mediciones internas para diagnosticar rendimiento (profiling). \u00datiles cuando algo va lento y no sabemos por qu\u00e9.</li> </ul> <p>Resumen r\u00e1pido</p> <ul> <li>Logs para narrar lo que pas\u00f3.  </li> <li>M\u00e9tricas para medir salud y tendencias.  </li> <li>Traces para seguir una petici\u00f3n compleja.  </li> <li>Eventos/perfiles para diagnosticar detalles.</li> </ul>"},{"location":"tema1/fases/#operativa-del-dia-a-dia","title":"\ud83d\udee0\ufe0f Operativa del d\u00eda a d\u00eda","text":""},{"location":"tema1/fases/#sli-slo-objetivos-de-servicio","title":"SLI / SLO (objetivos de servicio)","text":"<ul> <li>SLI (indicador): c\u00f3mo medimos la calidad (p. ej., disponibilidad, latencia).  </li> <li>SLO (objetivo): el valor que promete el servicio (p. ej., 99.9% de disponibilidad mensual o p95 &lt; 300 ms).  </li> <li>\u00bfPor qu\u00e9 importan? Porque gu\u00edan qu\u00e9 vigilar y cu\u00e1ndo alertar.</li> </ul>"},{"location":"tema1/fases/#alertas-solo-cuando-toca","title":"Alertas (solo cuando toca)","text":"<ul> <li>Accionables: si salta, alguien sabe qu\u00e9 hacer.  </li> <li>Basadas en SLO: alertar por impacto a la persona usuaria, no por cualquier pico t\u00e9cnico.  </li> <li>Evita duplicar alertas; agrupa y silencia cuando hay mantenimiento planificado.</li> </ul>"},{"location":"tema1/fases/#runbooks-y-postmortems","title":"Runbooks y post\u2011mortems","text":"<ul> <li>Runbook: gu\u00eda paso a paso para resolver una incidencia (qu\u00e9 mirar, comandos, plan B).  </li> <li>Post\u2011mortem: an\u00e1lisis sin culpas tras un incidente; causas, impacto y acciones de mejora.</li> </ul>"},{"location":"tema1/fases/#mantenimiento-preventivo","title":"Mantenimiento preventivo","text":"<ul> <li>Copias de seguridad verificadas, parches de seguridad al d\u00eda, limpieza de logs antiguos y rotaci\u00f3n de claves/secretos cuando aplique.</li> </ul>"},{"location":"tema1/fases/#ejemplos-de-que-mirar-en-una-web-sencilla","title":"\ud83d\udd0e Ejemplos de \u201cqu\u00e9 mirar\u201d en una web sencilla","text":"<ul> <li>Disponibilidad: % de peticiones que responden 200/OK.  </li> <li>Rendimiento: tiempo de respuesta medio y p95.  </li> <li>Errores: n\u00ba de 5xx por minuto y su causa m\u00e1s com\u00fan.  </li> <li>Experiencia: tiempo de carga de la p\u00e1gina principal.  </li> </ul> <p>Se\u00f1ales de alarma</p> <ul> <li>Subida brusca de 5xx o de latencia p95.  </li> <li>M\u00e1s reintentos de lo normal hacia un servicio externo.  </li> <li>Uso de CPU/RAM al 90% sostenido.</li> </ul> <p>Entradas \u2192 Salidas</p> <ul> <li>Entradas: versi\u00f3n desplegada, configuraci\u00f3n y dashboards iniciales.</li> <li>Salidas: alertas configuradas; paneles \u00fatiles; runbooks; acciones de mejora y parches aplicados.</li> </ul>"},{"location":"tema1/fases/#47-documentacion-y-gestion-del-conocimiento","title":"4.7 Documentaci\u00f3n y gesti\u00f3n del conocimiento","text":"<p>La documentaci\u00f3n reduce la dependencia de personas clave, acelera el onboarding, baja el coste de mantenimiento y facilita la toma de decisiones. No es un \u201cextra\u201d: es parte del producto.</p>"},{"location":"tema1/fases/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<ul> <li>Encontrable: cualquier persona localiza lo que necesita en &lt; 2 minutos.</li> <li>Actualizada: cada cambio relevante en c\u00f3digo/proceso viene con su actualizaci\u00f3n de docs.</li> <li>Accionable: gu\u00eda pasos concretos (no solo teor\u00eda).</li> <li>Consistente: misma voz, estructura y convenciones.</li> <li>Trazable: saber qui\u00e9n cambi\u00f3 qu\u00e9 y por qu\u00e9 (historial y versi\u00f3n).</li> </ul>"},{"location":"tema1/fases/#minimo-viable-de-documentacion-mvd","title":"\ud83e\uddf1 M\u00ednimo viable de documentaci\u00f3n (MVD)","text":"<p>Mant\u00e9n siempre estos b\u00e1sicos al d\u00eda en el repositorio principal:</p> <p>1) README (1 p\u00e1gina)</p> <ul> <li>Qu\u00e9 es, arquitectura, c\u00f3mo ejecutar/desarrollar, c\u00f3mo probar, c\u00f3mo desplegar en dev.</li> <li>Enlaces al resto de documentaci\u00f3n.</li> </ul> <p>2) Gu\u00eda de Contribuci\u00f3n (<code>CONTRIBUTING.md</code>)</p> <ul> <li>Flujo de ramas/PRs, estilo de c\u00f3digo, c\u00f3mo correr linter y tests, etiqueta de commits.</li> </ul> <p>3) Decisiones (ADR) (<code>/docs/adr/</code>)</p> <ul> <li>Cada decisi\u00f3n t\u00e9cnica relevante, con fecha, contexto, opci\u00f3n elegida y consecuencias.</li> </ul> <p>4) API y contratos</p> <ul> <li>OpenAPI/JSON Schema y ejemplos ejecutables (curl/HTTPie).</li> <li>Matriz de compatibilidad y pol\u00edtica de versionado (SemVer).</li> </ul> <p>5) Operaci\u00f3n</p> <ul> <li>Runbooks (c\u00f3mo actuar ante incidentes comunes), checklists de despliegue/rollback y SLO/SLI.</li> </ul>"},{"location":"tema1/fases/#adr-plantilla-breve","title":"\ud83e\uddfe ADR: plantilla breve","text":"Text Only<pre><code># ADR-XXX: T\u00edtulo\nFecha: YYYY-MM-DD\nEstado: Propuesto | Aprobado | Obsoleto | Reemplazado por ADR-YYY\n\n## Contexto\nProblema / fuerzas en conflicto (breve).\n\n## Opciones consideradas\n- Opci\u00f3n A\n- Opci\u00f3n B\n- Opci\u00f3n C\n\n## Decisi\u00f3n\nOpci\u00f3n elegida y por qu\u00e9.\n\n## Consecuencias\nImpactos positivos/negativos, riesgos, seguimiento.\n</code></pre> <p>Entradas \u2192 Salidas</p> <ul> <li>Entradas: c\u00f3digo y procesos actuales; decisiones recientes; SLO/SLI definidos; est\u00e1ndares de estilo.</li> <li>Salidas: documentaci\u00f3n mencionada.</li> </ul>"},{"location":"tema1/fases/#checklist-rapida-por-fase","title":"\u2705 Checklist r\u00e1pida por fase","text":"Abrir checklist <p>An\u00e1lisis </p> <ul> <li>Requisitos claros, medibles y priorizados (MoSCoW/INVEST).  </li> <li>Historias con criterios verificables y glosario.</li> </ul> <p>Dise\u00f1o </p> <ul> <li>Arquitectura justificada (ADR).  </li> <li>UML m\u00ednimo actualizado; contratos de API.</li> </ul> <p>Implementaci\u00f3n </p> <ul> <li>Estilo autom\u00e1tico; PRs peque\u00f1os; commits at\u00f3micos.  </li> <li>Revisiones con checklist y cobertura m\u00ednima acordada.</li> </ul> <p>Pruebas </p> <ul> <li>Pir\u00e1mide equilibrada; datos de prueba controlados.  </li> <li>BDD/TDD cuando aplique.</li> </ul> <p>Despliegue </p> <ul> <li>Estrategia (blue/green, canary, rolling) y rollback probado.</li> </ul> <p>Operaci\u00f3n </p> <ul> <li>SLI/SLO definidos; alertas; dashboards; runbooks.  </li> <li>Post-mortems con acciones de mejora.</li> </ul> <p>Documentaci\u00f3n </p> <ul> <li>README, ADR, API, gu\u00edas; DoD incluye actualizaci\u00f3n de docs.</li> </ul>"},{"location":"tema1/fases/#tabla-resumen-entradas-salidas-por-fase","title":"\ud83d\uddc2\ufe0f Tabla resumen: Entradas \u2192 Salidas por fase","text":"Fase Entradas (clave) Salidas (clave) 4.1 An\u00e1lisis Objetivos de negocio; restricciones; normativa; stakeholders Requisitos priorizados; historias con criterios; mockups; flujo alto nivel 4.2 Dise\u00f1o Requisitos e historias; restricciones; objetivos de calidad Diagramas UML m\u00ednimos; ADR; contratos API/datos; prototipos 4.3 Implementaci\u00f3n Requisitos claros; dise\u00f1o acordado C\u00f3digo legible y ejecutable; gu\u00eda de ejecuci\u00f3n; casos b\u00e1sicos probados 4.4 Pruebas Criterios de aceptaci\u00f3n; c\u00f3digo y cambios; datos de prueba; entorno Resultados de pruebas; defectos y correcciones; evidencias 4.5 Despliegue Build aprobado; configuraci\u00f3n/secretos; instrucciones Versi\u00f3n publicada; changelog/notas; rollback verificado; m\u00e9tricas iniciales 4.6 Operaci\u00f3n Versi\u00f3n desplegada; configuraci\u00f3n; dashboards Alertas configuradas; paneles; runbooks; mejoras y parches 4.7 Documentaci\u00f3n C\u00f3digo/procesos; decisiones; SLO/SLI; est\u00e1ndares Documentaci\u00f3n MVD publicada y versionada (README, ADR, API, operaci\u00f3n)"},{"location":"tema1/fases/#48-metodologias-de-ciclo-de-vida","title":"\ud83d\udcda 4.8 Metodolog\u00edas de ciclo de vida","text":"<p>Este apartado resume los principales enfoques para organizar las fases del desarrollo. No sustituyen a las fases vistas (an\u00e1lisis \u2192 dise\u00f1o \u2192 implementaci\u00f3n \u2192 pruebas \u2192 despliegue \u2192 operaci\u00f3n \u2192 documentaci\u00f3n), sino que ordenan c\u00f3mo iteramos, entregamos y controlamos el riesgo.</p> <p>Idea clave</p> <p>Elige el modelo seg\u00fan incertidumbre, riesgo, regulaci\u00f3n y necesidad de feedback. Puedes combinar enfoques (modelos h\u00edbridos).</p>"},{"location":"tema1/fases/#cascada-waterfall","title":"\ud83d\udca7 Cascada (Waterfall)","text":"<p>Secuencial: cada fase se completa antes de pasar a la siguiente.</p> <pre><code>flowchart LR\n  A[An\u00e1lisis] --&gt; B[Dise\u00f1o]\n  B --&gt; C[Implementaci\u00f3n]\n  C --&gt; D[Pruebas]\n  D --&gt; E[Despliegue]\n  E --&gt; F[Operaci\u00f3n]</code></pre> <p>Ventajas</p> <ul> <li>Claridad de entregables y fechas.</li> <li>\u00datil con requisitos muy estables y en entornos regulados.</li> </ul> <p>Riesgos</p> <ul> <li>Feedback tard\u00edo; cambios costosos.</li> <li>Puede ocultar supuestos hasta muy tarde.</li> </ul> <p>Cu\u00e1ndo: software con alto grado de certeza, contratos cerrados, normativa estricta.</p>"},{"location":"tema1/fases/#modelo-en-v","title":"\u2705 Modelo en V","text":"<p>Extiende cascada con trazabilidad entre fases y pruebas: cada etapa de definici\u00f3n tiene su pareja de verificaci\u00f3n.</p> <pre><code>flowchart LR\n  subgraph Definici\u00f3n\n  A1[Requisitos] --&gt; A2[Dise\u00f1o de sistema] --&gt; A3[Dise\u00f1o detallado]\n  end\n  subgraph Verificaci\u00f3n\n  B3[Pruebas unitarias] --&gt; B2[Pruebas de integraci\u00f3n] --&gt; B1[Pruebas de sistema/aceptaci\u00f3n]\n  end\n  A3 -.-&gt; B3\n  A2 -.-&gt; B2\n  A1 -.-&gt; B1</code></pre> <p>Ventajas: planificaci\u00f3n de pruebas desde el principio, trazabilidad clara.</p> <p>Cu\u00e1ndo: sectores cr\u00edticos (automoci\u00f3n, aeroespacial, sanitario) o exigencia formal de verificaci\u00f3n/validaci\u00f3n.</p>"},{"location":"tema1/fases/#incremental","title":"\ud83e\uddf1 Incremental","text":"<p>Se entrega el producto en bloques funcionales (incrementos) que suman valor.</p> <p>Ventajas</p> <ul> <li>Valor temprano y priorizable.</li> <li>Reduce el riesgo de \u201cgran entrega final\u201d.</li> </ul> <p>Riesgos</p> <ul> <li>Puede acumular deuda de arquitectura si no se piensa a medio plazo.</li> </ul> <p>Cu\u00e1ndo: alcance grande que puede partirse en funcionalidades.</p>"},{"location":"tema1/fases/#iterativo","title":"\ud83d\udd01 Iterativo","text":"<p>Se repiten ciclos completos (analizar\u2192dise\u00f1ar\u2192construir\u2192probar) para refinar el mismo producto.</p> <p>Diferencia con incremental: </p> <ul> <li>Incremental = a\u00f1ado nuevas piezas.</li> <li>Iterativo = mejora la misma pieza en vueltas sucesivas.</li> </ul> <p>Cu\u00e1ndo: requisitos difusos o descubrimiento de UX.</p>"},{"location":"tema1/fases/#espiral-boehm","title":"\ud83c\udf00 Espiral (Boehm)","text":"<p>Ciclos que ponen el riesgo en el centro. En cada vuelta: 1) objetivos y alternativas, 2) an\u00e1lisis de riesgos y mitigaci\u00f3n (prototipos), 3) desarrollo y validaci\u00f3n, 4) planificaci\u00f3n de la siguiente vuelta.</p> <pre><code>flowchart TD\n  P[Planificar objetivos] --&gt; R[Identificar/mitigar riesgos]\n  R --&gt; D[Desarrollar y validar]\n  D --&gt; N[Plan siguiente iteraci\u00f3n]\n  N --&gt; P</code></pre> <p>Ventajas: gesti\u00f3n expl\u00edcita de riesgos; combina prototipado y entregas.</p> <p>Riesgos: complejidad de gesti\u00f3n; requiere experiencia.</p> <p>Cu\u00e1ndo: proyectos innovadores o de alto riesgo t\u00e9cnico/negocio.</p>"},{"location":"tema1/fases/#enfoques-agiles-scrum-kanban-xp","title":"\u26a1 Enfoques \u00e1giles (Scrum, Kanban, XP)","text":"<p>Los veremos en la \u00faltima parte del tema.</p>"},{"location":"tema1/herramientas/","title":"Herramientas","text":""},{"location":"tema1/herramientas/#5-herramientas-y-procesos-de-construccion","title":"\ud83e\uddf0 5. Herramientas y procesos de construcci\u00f3n","text":"<p>Descarga de diapositivas</p> <p>Descarga las diapositivas</p> <p>Estas herramientas ayudan a pasar de c\u00f3digo a programa que funciona, a mantener la calidad y a colaborar sin romper nada.</p>"},{"location":"tema1/herramientas/#51-editores-e-ides-que-son-y-para-que","title":"5.1 \u270d\ufe0f Editores e IDEs (qu\u00e9 son y para qu\u00e9)","text":"<ul> <li>Editor de c\u00f3digo: para escribir y navegar por el c\u00f3digo con resaltado, autocompletado y extensiones.  </li> <li>IDE (Entorno Integrado): adem\u00e1s del editor, incluye ejecuci\u00f3n, depuraci\u00f3n, pruebas e integraci\u00f3n profunda con el lenguaje.</li> </ul> <p>Comparativa r\u00e1pida</p> \ud83e\udde9 Aspecto \ud83d\udd8a\ufe0f Editor de c\u00f3digo \ud83e\udde0 IDE Enfoque Ligero y flexible Suite completa para un lenguaje/stack Funciones Edici\u00f3n, autocompletado, extensiones Build, debug, pruebas, refactorizaciones Conviene cuando Varios lenguajes, proyectos peque\u00f1os/mixtos Proyectos medianos/grandes, tooling avanzado <p>Buenas pr\u00e1cticas</p> <ul> <li>Abre siempre la carpeta ra\u00edz del proyecto.  </li> <li>Activa formato al guardar y usa un formateador.  </li> <li>Define tareas/scripts del proyecto (build, test, lint).  </li> <li>A\u00f1ade <code>.editorconfig</code> al repositorio para un estilo consistente.</li> </ul>"},{"location":"tema1/herramientas/#52-control-de-versiones-git-ideas-clave","title":"5.2 \ud83e\udded Control de versiones (Git): ideas clave","text":"<p>\u00bfQu\u00e9 es Git?</p> <p>Un sistema que guarda el historial del proyecto y permite trabajar en ramas de forma segura.</p> <ul> <li>Commit: \u201cfoto\u201d de los cambios con un mensaje claro (qu\u00e9 y por qu\u00e9).  </li> <li>Branch (rama): l\u00ednea de trabajo paralela para experimentar sin romper lo estable.  </li> <li>Merge: unir lo hecho en una rama con la principal tras revisi\u00f3n.  </li> </ul> <p>Flujos habituales - GitHub Flow \u2192 <code>main</code> estable \u2192 rama \u2192 revisi\u00f3n \u2192 uni\u00f3n. - GitFlow \u2192 a\u00f1ade ramas de <code>release</code> y <code>hotfix</code> para equipos/proyectos m\u00e1s formales.</p> <p>Mensajes \u00fatiles</p> <p>Prefiere commits peque\u00f1os y frecuentes con mensajes concretos.</p>"},{"location":"tema1/herramientas/#53-sistemas-de-construccion-y-gestores-de-dependencias","title":"5.3 \ud83e\uddf1 Sistemas de construcci\u00f3n y gestores de dependencias","text":"<ul> <li>Construcci\u00f3n (build): transforma el c\u00f3digo en algo ejecutable o instalable (binario, paquete, app).  </li> <li>Dependencias: bibliotecas externas que el proyecto necesita y se declaran en archivos de configuraci\u00f3n.</li> </ul> <p>Matriz orientativa</p> Lenguaje Construcci\u00f3n Gestor de dependencias Archivos habituales C/C++ Make / CMake \u2014 <code>Makefile</code>, <code>CMakeLists.txt</code> Java Maven / Gradle Maven/Gradle <code>pom.xml</code>, <code>build.gradle</code> JavaScript/Node Scripts de proyecto npm / pnpm <code>package.json</code> Python Scripts de proyecto pip / poetry <code>requirements.txt</code>, <code>pyproject.toml</code> <p>Evita el \u201cen mi PC funciona\u201d</p> <ul> <li>Centraliza tareas en scripts del proyecto para que se ejecuten igual en todos los equipos.  </li> <li>Fija versiones cuando sea posible (lockfiles).</li> </ul>"},{"location":"tema1/herramientas/#54-calidad-de-codigo-conceptos-basicos","title":"5.4 \u2705 Calidad de c\u00f3digo: conceptos b\u00e1sicos","text":"<p>Cuatro piezas que se complementan</p> <ul> <li>Linter: detecta errores comunes y malas pr\u00e1cticas.  </li> <li>Formateador: aplica un estilo uniforme autom\u00e1ticamente.  </li> <li>An\u00e1lisis est\u00e1tico: encuentra problemas sin ejecutar el programa.  </li> <li>Cobertura de pruebas: % del c\u00f3digo que ejecutan las pruebas autom\u00e1ticas.</li> </ul> <p>Por qu\u00e9 importa </p> <ul> <li>Facilita leer y mantener.  </li> <li>Reduce errores repetitivos.  </li> <li>Da confianza al cambiar (si hay pruebas y m\u00e9tricas).</li> </ul> <p>Chequeos recomendados</p> <p>Ejecuta formato \u2192 linter \u2192 pruebas en ese orden. Es r\u00e1pido y evita sorpresas.</p>"},{"location":"tema1/herramientas/#55-depuracion-y-perfilado","title":"5.5 \ud83d\udc1e Depuraci\u00f3n y \ud83d\udcc8 perfilado","text":"<ul> <li>Depuraci\u00f3n (debug): ejecutar paso a paso, inspeccionar variables y entender el flujo real.  </li> <li>Perfilado (profiling): medir tiempo y memoria para localizar cuellos de botella.</li> </ul> <p>En la pr\u00e1ctica</p> <p>1) Coloca un punto de ruptura cerca del fallo. 2) Reproduce el caso y observa valores/condiciones. 3) Si es rendimiento, mide antes de cambiar y comprueba el impacto.</p>"},{"location":"tema1/herramientas/#56-entornos-y-configuracion-variables-y-secrets","title":"5.6 \ud83e\udde9 Entornos y configuraci\u00f3n: variables y secrets","text":"<ul> <li>Entornos: desarrollo, pruebas, producci\u00f3n (mismo c\u00f3digo, valores distintos).  </li> <li>Variables de entorno: pares clave/valor que la app lee al arrancar.  </li> <li>Secrets: credenciales sensibles (no deben guardarse en el repositorio).  </li> <li>Archivos <code>.env</code>: opci\u00f3n local para variables (se excluyen del repositorio).</li> </ul> <p>Reglas sencillas</p> <ul> <li>Nunca publiques secrets.  </li> <li>Valida la configuraci\u00f3n al inicio (si falta algo, falla de forma expl\u00edcita).  </li> <li>Evita valores codificados en el programa.</li> </ul>"},{"location":"tema1/herramientas/#57-contenedores-y-virtualizacion-docker","title":"5.7 \ud83e\uddf1\ud83d\udce6 Contenedores y virtualizaci\u00f3n (Docker)","text":"<p>\u00bfQu\u00e9 problema resuelven?</p> <p>Evitan el cl\u00e1sico \u201cen mi ordenador funciona\u201d. Un contenedor lleva tu app junto con todo lo que necesita (sistema base, librer\u00edas, runtime) para ejecutarse igual en cualquier m\u00e1quina.</p> <p>Conceptos clave</p> <ul> <li>Imagen: plantilla de solo lectura con tu app y sus dependencias. Es una receta versionada (p. ej., <code>miapp:1.0</code>).  </li> <li>Contenedor: instancia en ejecuci\u00f3n de una imagen. Como un tupper creado a partir de la receta: puedes abrir, usar y borrar sin afectar a la imagen.  </li> <li>Registry: almac\u00e9n donde publicas y desde donde descargas im\u00e1genes (Docker Hub, GHCR\u2026).  </li> </ul> <p>Flujo t\u00edpico (alto nivel)</p> <ol> <li>Definir c\u00f3mo se construye la imagen (<code>Dockerfile</code>).  </li> <li>Construir y etiquetar la imagen (<code>miapp:1.0</code>).  </li> <li>Ejecutar la imagen como contenedor (variables, puertos).  </li> <li>(Opcional) Publicar en un registry para compartir o desplegar.</li> </ol> <p>Ventajas principales</p> <ul> <li>Reproducibilidad: mismo entorno en desarrollo, pruebas y producci\u00f3n.  </li> <li>Aislamiento: dependencias sin \u201censuciar\u201d el sistema anfitri\u00f3n.  </li> <li>Rapidez: arranque/parada en segundos; capas cacheadas al construir.  </li> </ul> <p>Contenedores vs. m\u00e1quinas virtuales (idea r\u00e1pida)</p> Caracter\u00edstica Contenedor M\u00e1quina virtual \u23f1\ufe0f Arranque Segundos Decenas de segundos/minutos \ud83d\udce6 Tama\u00f1o Ligero (MB\u2013cientos de MB) Pesado (GB) \ud83d\udd12 Aislamiento A nivel de proceso (kernel compartido) Kernel propio (aislamiento m\u00e1s fuerte) \ud83e\uddf0 Uso t\u00edpico Empaquetar apps/servicios Emular sistemas completos <p>Cu\u00e1ndo tiene sentido </p> <ul> <li>Proyectos con m\u00faltiples servicios (web + base de datos + cach\u00e9).  </li> <li>Equipos (todas las personas ejecutan la misma imagen).  </li> <li>Despliegues (empaquetar y publicar una versi\u00f3n concreta de la app).</li> </ul>"},{"location":"tema1/herramientas/#58-automatizacion-de-tareas-y-ci","title":"5.8 \ud83e\udd16 Automatizaci\u00f3n de tareas y CI","text":"<p>Objetivo</p> <p>Que los pasos importantes (formato, an\u00e1lisis, pruebas, build) se hagan siempre igual y autom\u00e1ticamente, reduciendo errores y acelerando el feedback.</p> <p>Piezas que se complementan </p> <ul> <li>Scripts: comandos con nombre dentro del proyecto (<code>build</code>, <code>test</code>, <code>lint</code>, <code>format</code>).  </li> <li>Hooks de Git: reglas que se ejecutan antes/despu\u00e9s de ciertas acciones (p. ej., pre-commit para pasar linter y pruebas r\u00e1pidas antes de confirmar).  </li> <li>CI (Integraci\u00f3n Continua): un servicio que, en cada push o pull request, clona el repo y ejecuta los scripts (lint, pruebas, build\u2026).</li> </ul> <p>Pipeline t\u00edpico (orden recomendado)</p> <ol> <li>Chequeos r\u00e1pidos \u2192 formato y linter.  </li> <li>Pruebas \u2192 unitarias e integraci\u00f3n (con umbral m\u00ednimo de cobertura).  </li> <li>Build \u2192 generar artefacto (binario/paquete/contenedor).  </li> <li>(Opcional) Publicaci\u00f3n \u2192 registry o pre\u2011release.  </li> <li>(Opcional) An\u00e1lisis \u2192 seguridad de dependencias, licencias.</li> </ol> <pre><code>flowchart LR\n  A[Push/PR] --&gt; B[Lint &amp; formato]\n  B --&gt; C[Pruebas]\n  C --&gt; D[Build]\n  D --&gt; E[(Artefactos)]\n  C --&gt;|fallo| X[Feedback en la PR]\n  D --&gt;|ok| Y[Checks verdes]</code></pre> <p>Consejos pr\u00e1cticos</p> <ul> <li>Mant\u00e9n los scripts cortos y autoexplicativos (<code>test</code>, <code>build</code>, <code>lint</code>, <code>format</code>, <code>start</code>).  </li> <li>Ejecuta primero lo r\u00e1pido (lint) y luego lo costoso (pruebas, build).  </li> <li>Gestiona secretos de CI en el almac\u00e9n de secretos del proveedor (no en el repo).  </li> <li>Cachea dependencias para acelerar la ejecuci\u00f3n.</li> </ul>"},{"location":"tema1/herramientas/#tabla-resumen","title":"\ud83d\uddc2\ufe0f Tabla resumen","text":"Tema \u00bfQu\u00e9 es? \u00bfPara qu\u00e9 sirve? \u270d\ufe0f Editores/IDEs Herramientas para escribir y gestionar c\u00f3digo Producir y comprender c\u00f3digo con ayudas \ud83e\udded Control de versiones Historial, ramas y fusiones Trabajar en equipo sin perder cambios \ud83e\uddf1 Construcci\u00f3n/Dependencias Proceso y bibliotecas del proyecto Obtener ejecutables y traer librer\u00edas externas \u2705 Calidad Linter, formateador, an\u00e1lisis, cobertura Mantener estilo, detectar fallos, medir pruebas \ud83d\udc1e/\ud83d\udcc8 Depuraci\u00f3n/Perfilado Seguimiento y medici\u00f3n de la ejecuci\u00f3n Encontrar errores y cuellos de botella \ud83e\udde9 Entornos/Config Valores por entorno y secretos Cambiar comportamiento sin tocar el c\u00f3digo \ud83d\udce6 Contenedores Im\u00e1genes y contenedores aislados Ejecutar igual en cualquier sitio \ud83e\udd16 Automatizaci\u00f3n/CI Scripts, hooks y verificaci\u00f3n en servidor Estandarizar pasos y detectar problemas pronto"},{"location":"tema1/lenguajes/","title":"Lenguajes","text":""},{"location":"tema1/lenguajes/#3-lenguajes-de-programacion-y-paradigmas","title":"\ud83d\udcdd 3. Lenguajes de programaci\u00f3n y paradigmas","text":"<p>Descarga de diapositivas</p> <p>Descarga las diapositivas</p>"},{"location":"tema1/lenguajes/#31-criterios-de-clasificacion-de-lenguajes","title":"3.1 Criterios de clasificaci\u00f3n de lenguajes","text":"<p>Idea clave</p> <p>Los lenguajes de programaci\u00f3n no son todos iguales. Podemos clasificarlos seg\u00fan distintos criterios, lo que nos ayuda a entender c\u00f3mo se usan, qu\u00e9 tan f\u00e1ciles son y para qu\u00e9 sirven.</p>"},{"location":"tema1/lenguajes/#segun-el-nivel-de-abstraccion","title":"\ud83d\udd39 Seg\u00fan el nivel de abstracci\u00f3n","text":"<ul> <li> <p> Lenguajes de bajo nivel </p> <ul> <li>\ud83d\udd21 Cercanos al lenguaje m\u00e1quina.  </li> <li>\ud83d\udda5\ufe0f Ejemplo: Ensamblador.  </li> <li>\u2705 Pros: control total del hardware.  </li> <li>\u274c Contras: muy dif\u00edciles de aprender y mantener.  </li> <li>\u2699\ufe0f Uso t\u00edpico: sistemas embebidos, drivers, firmware.  </li> </ul> </li> <li> <p> Lenguajes de alto nivel </p> <ul> <li>\ud83e\uddd1\u200d\ud83d\udcbb Cercanos al lenguaje humano.  </li> <li>\ud83c\udf0d Ejemplos: Python, Java, C#.  </li> <li>\u2705 Pros: f\u00e1ciles de aprender, portables.  </li> <li>\u274c Contras: menos control directo sobre el hardware.  </li> <li>\ud83d\udcf1 Uso t\u00edpico: apps web, m\u00f3viles, software de usuario.  </li> </ul> </li> </ul>"},{"location":"tema1/lenguajes/#segun-el-proposito","title":"\ud83d\udd39 Seg\u00fan el prop\u00f3sito","text":"Tipo Caracter\u00edsticas Ejemplos Uso t\u00edpico Generales Sirven para casi cualquier aplicaci\u00f3n Java, Python, C++ Desarrollo de software en general De dominio espec\u00edfico (DSL) Creado para tareas concretas SQL, HTML/CSS, MATLAB Bases de datos, web, c\u00e1lculo cient\u00edfico"},{"location":"tema1/lenguajes/#segun-el-dominio-de-aplicacion","title":"\ud83d\udd39 Seg\u00fan el dominio de aplicaci\u00f3n","text":"<ul> <li> <p> Sistemas </p> <ul> <li>Lenguajes pensados para interactuar con hardware y SO.  </li> <li>Ejemplos: C, C++.  </li> </ul> </li> <li> <p> Aplicaciones web </p> <ul> <li>Enfocados a Internet y servidores.  </li> <li>Ejemplos: JavaScript, PHP.  </li> </ul> </li> <li> <p> Datos / IA </p> <ul> <li>An\u00e1lisis, big data, machine learning.  </li> <li>Ejemplos: Python, R, Julia.  </li> </ul> </li> <li> <p> M\u00f3viles </p> <ul> <li>Para apps en Android/iOS.  </li> <li>Ejemplos: Kotlin, Swift.  </li> </ul> </li> <li> <p> Embebidos </p> <ul> <li>Para dispositivos con pocos recursos.  </li> <li>Ejemplos: C, Rust.  </li> </ul> </li> </ul>"},{"location":"tema1/lenguajes/#32-tipado-de-lenguajes","title":"3.2 Tipado de lenguajes","text":"<p>\u00bfQu\u00e9 es el tipado?</p> <p>El tipo de dato (n\u00famero, texto, booleano, etc.) define qu\u00e9 operaciones se pueden hacer. Seg\u00fan el lenguaje, los tipos se controlan de formas distintas, lo que afecta a la seguridad, flexibilidad y facilidad de programaci\u00f3n.</p>"},{"location":"tema1/lenguajes/#segun-el-momento-en-que-se-comprueban","title":"\ud83d\udd39 Seg\u00fan el momento en que se comprueban","text":"<ul> <li> <p> Est\u00e1tico </p> <ul> <li>El compilador revisa los tipos antes de ejecutar.  </li> <li>Ejemplos: Java, C, Rust.  </li> <li>\u2705 Ventaja: detecta muchos errores en la fase de compilaci\u00f3n \u2192 m\u00e1s seguro.  </li> <li>\u274c Inconveniente: m\u00e1s estricto, hay que declarar todo con detalle.  </li> </ul> </li> <li> <p> Din\u00e1mico </p> <ul> <li>Los tipos se verifican mientras se ejecuta.  </li> <li>Ejemplos: Python, JavaScript, Ruby.  </li> <li>\u2705 Ventaja: m\u00e1s flexible y r\u00e1pido de escribir (menos c\u00f3digo).  </li> <li>\u274c Inconveniente: errores de tipos pueden aparecer en tiempo de ejecuci\u00f3n.  </li> </ul> </li> </ul>"},{"location":"tema1/lenguajes/#segun-la-rigidez-en-el-uso-de-tipos","title":"\ud83d\udd39 Seg\u00fan la rigidez en el uso de tipos","text":"Tipo Descripci\u00f3n Ejemplo Resultado Fuerte No permite mezclar tipos sin conversi\u00f3n expl\u00edcita. <code>Python: \"3\" + 2</code> \u274c Error D\u00e9bil Hace conversiones autom\u00e1ticas (a veces inesperadas). <code>JavaScript: \"3\" + 2</code> <code>\"32\"</code> <p>Atenci\u00f3n</p> <p>Un lenguaje de tipado d\u00e9bil puede producir resultados extra\u00f1os sin avisar, lo que genera bugs dif\u00edciles de detectar.  </p>"},{"location":"tema1/lenguajes/#inferencia-de-tipos","title":"\ud83d\udd39 Inferencia de tipos","text":"<p>Algunos lenguajes deducen autom\u00e1ticamente el tipo de una variable seg\u00fan el valor que se le asigna.</p> Kotlin<pre><code>// Kotlin\nval x = 5        // El compilador entiende que x es un Int\nval nombre = \"Ana\" // El compilador entiende que es un String\n</code></pre> <ul> <li>\u2705 Ventaja: ahorra escritura y mantiene seguridad de tipos.  </li> <li>\u274c Inconveniente: a veces el tipo deducido no es el esperado si no se tiene cuidado.  </li> </ul>"},{"location":"tema1/lenguajes/#33-paradigmas-de-programacion","title":"3.3 Paradigmas de programaci\u00f3n","text":"<p>Idea clave</p> <p>Un paradigma es un estilo de programaci\u00f3n, es decir, la manera en que se organiza y estructura el c\u00f3digo. \ud83d\udc49 Un mismo lenguaje puede soportar varios paradigmas.</p> <ul> <li> <p> Imperativo / Procedimental </p> <ul> <li>\ud83d\udcdc El programa es una secuencia de instrucciones paso a paso.  </li> <li>\ud83d\udd27 Uso t\u00edpico: algoritmos simples, sistemas b\u00e1sicos.  </li> <li>\ud83d\udda5\ufe0f Ejemplo: C.  </li> </ul> </li> <li> <p> Orientado a Objetos (POO) </p> <ul> <li>\ud83d\udce6 C\u00f3digo organizado en clases y objetos.  </li> <li>\ud83d\udd04 Cada objeto tiene atributos (datos) y m\u00e9todos (acciones).  </li> <li>\ud83d\udda5\ufe0f Ejemplo: Java, C++.  </li> </ul> </li> <li> <p> Funcional </p> <ul> <li>\u2795 Se centra en funciones puras (sin efectos secundarios).  </li> <li>\ud83d\udd04 Evita modificar datos directamente.  </li> <li>\ud83d\udda5\ufe0f Ejemplo: Haskell, Scala, Elixir.  </li> </ul> </li> <li> <p> L\u00f3gico </p> <ul> <li>\ud83d\udcd0 Basado en reglas y hechos.  </li> <li>\ud83e\udd16 El programa deduce soluciones autom\u00e1ticamente.  </li> <li>\ud83d\udda5\ufe0f Ejemplo: Prolog.  </li> </ul> </li> <li> <p> Orientado a eventos </p> <ul> <li>\ud83d\uddb1\ufe0f El flujo depende de eventos externos (clics, se\u00f1ales\u2026).  </li> <li>\ud83c\udf10 Muy com\u00fan en interfaces gr\u00e1ficas y la web.  </li> <li>\ud83d\udda5\ufe0f Ejemplo: JavaScript en navegadores.  </li> </ul> </li> <li> <p> Reactivo </p> <ul> <li>\u26a1 Pensado para datos en tiempo real y asincron\u00eda.  </li> <li>\ud83d\udd04 Se adapta a flujos de informaci\u00f3n continuos.  </li> <li>\ud83d\udda5\ufe0f Ejemplo: RxJava, frameworks modernos (Angular, React).  </li> </ul> </li> </ul>"},{"location":"tema1/lenguajes/#34-ecosistemas-y-estandares","title":"3.4 Ecosistemas y est\u00e1ndares","text":"<p>Los lenguajes suelen estar regulados por organismos y est\u00e1ndares:</p> <ul> <li>ISO C/C++ \u2192 definen c\u00f3mo deben funcionar los compiladores.  </li> <li>ECMA \u2192 regula JavaScript (ECMAScript).  </li> <li>PEPs (Python Enhancement Proposals) \u2192 propuestas de mejora en Python.  </li> <li>JSRs (Java Specification Requests) \u2192 definen c\u00f3mo evoluciona Java.  </li> </ul>"},{"location":"tema1/lenguajes/#35-eleccion-del-lenguaje-segun-escenario","title":"3.5 Elecci\u00f3n del lenguaje seg\u00fan escenario","text":"Escenario Lenguajes t\u00edpicos Raz\u00f3n Sistemas operativos / drivers C, C++ Control cercano al hardware Web (frontend) JavaScript, TypeScript Se ejecuta en navegadores Web (backend) Python, Java, Node.js Gran ecosistema y frameworks M\u00f3viles Kotlin (Android), Swift (iOS) Integraci\u00f3n nativa Datos / IA Python, R Librer\u00edas para an\u00e1lisis y ML Embebidos / IoT C, Rust Bajo consumo, eficiencia"},{"location":"tema1/lenguajes/#36-casos-comparativos-breves","title":"3.6 Casos comparativos breves","text":"<p>Lenguaje C</p> <ul> <li>\ud83c\udff7\ufe0f Nivel: medio-bajo.  </li> <li>\ud83d\udee1\ufe0f Tipado: est\u00e1tico y fuerte.  </li> <li>\ud83e\udde9 Paradigma: procedimental.  </li> <li>\u2699\ufe0f Usos t\u00edpicos: sistemas operativos, drivers, software embebido.  </li> </ul> <p>Java</p> <ul> <li>\ud83c\udff7\ufe0f Nivel: alto.  </li> <li>\ud83d\udee1\ufe0f Tipado: est\u00e1tico y fuerte.  </li> <li>\ud83e\udde9 Paradigma: orientado a objetos.  </li> <li>\ud83d\udcf1 Usos t\u00edpicos: aplicaciones empresariales, Android, sistemas distribuidos.  </li> </ul> <p>Python</p> <ul> <li>\ud83c\udff7\ufe0f Nivel: alto.  </li> <li>\ud83d\udee1\ufe0f Tipado: din\u00e1mico y fuerte.  </li> <li>\ud83e\udde9 Paradigma: multiparadigma (imperativo, POO, funcional).  </li> <li>\ud83e\udd16 Usos t\u00edpicos: ciencia de datos, IA, scripting, desarrollo web.  </li> </ul> <p>JavaScript</p> <ul> <li>\ud83c\udff7\ufe0f Nivel: alto.  </li> <li>\ud83d\udee1\ufe0f Tipado: din\u00e1mico y d\u00e9bil.  </li> <li>\ud83e\udde9 Paradigma: orientado a eventos, funcional.  </li> <li>\ud83c\udf10 Usos t\u00edpicos: frontend web, backend (Node.js), apps h\u00edbridas.  </li> </ul> <p>Rust</p> <ul> <li>\ud83c\udff7\ufe0f Nivel: medio-alto.  </li> <li>\ud83d\udee1\ufe0f Tipado: est\u00e1tico y fuerte.  </li> <li>\ud83e\udde9 Paradigma: multiparadigma.  </li> <li>\u26a1 Usos t\u00edpicos: sistemas de alto rendimiento, programaci\u00f3n segura, embebidos.  </li> </ul> <p>Kotlin</p> <ul> <li>\ud83c\udff7\ufe0f Nivel: alto.  </li> <li>\ud83d\udee1\ufe0f Tipado: est\u00e1tico, con inferencia.  </li> <li>\ud83e\udde9 Paradigma: orientado a objetos + funcional.  </li> <li>\ud83d\udcf1 Usos t\u00edpicos: Android, aplicaciones multiplataforma, backend.  </li> </ul>"},{"location":"tema1/metodologias/","title":"Metodolog\u00edas","text":""},{"location":"tema1/metodologias/#6-metodologias-agiles","title":"\ud83d\ude80 6. Metodolog\u00edas \u00e1giles","text":"<p>Descarga de diapositivas</p> <p>Descarga las diapositivas</p>"},{"location":"tema1/metodologias/#61-manifiesto-agil","title":"\ud83e\udde0 6.1 Manifiesto \u00c1gil","text":"<p>Resumen en una frase: Agilidad = personas, software funcionando, colaboraci\u00f3n y adaptaci\u00f3n al cambio para entregar valor temprano y continuo.</p>"},{"location":"tema1/metodologias/#los-4-valores-con-habitos-concretos","title":"\ud83c\udfaf Los 4 valores (con h\u00e1bitos concretos)","text":"<ul> <li> <p> Personas e interacciones \u2192 mejor feedback y decisiones m\u00e1s r\u00e1pidas</p> <ul> <li>Haz: dailies para planificar el d\u00eda, pair programming, canales abiertos.</li> <li>Evita: handoffs innecesarios, \u201cmanda un correo y ya\u201d.</li> </ul> </li> <li> <p> Software funcionando \u2192 progreso visible</p> <ul> <li>Haz: demos quincenales, feature flags, MVP (Producto M\u00ednimo Viable).</li> <li>Evita: documentaci\u00f3n eterna sin nada que probar.</li> </ul> </li> <li> <p> Colaboraci\u00f3n con el cliente \u2192 alineaci\u00f3n de valor</p> <ul> <li>Haz: refinamiento con stakeholders, criterios de aceptaci\u00f3n conjuntos.</li> <li>Evita: contratos r\u00edgidos que ignoran datos de uso.</li> </ul> </li> <li> <p> Respuesta al cambio \u2192 decidir con informaci\u00f3n reciente</p> <ul> <li>Haz: re-priorizar por impacto/medici\u00f3n cada semana.</li> <li>Evita: \u201cseguimos el plan aunque ya no tenga sentido\u201d.</li> </ul> </li> </ul>"},{"location":"tema1/metodologias/#de-idea-a-valor-ciclo-agil-con-feedback","title":"\ud83d\udd01 De idea a valor: ciclo \u00e1gil con feedback","text":"<pre><code>flowchart LR\n  A[\"Idea / Necesidad\"] --&gt; B[\"Refinar\n(historia + criterios)\"]\n  B --&gt; C[\"Construir\n(lote peque\u00f1o)\"]\n  C --&gt; D[\"Demostrar\n(software funcionando)\"]\n  D --&gt; E[\"Medir / Aprender\"]\n  E -- Repriorizar --&gt; B\n  D --&gt; X[\"Release controlado\n(flags/canary)\"]\n  X --&gt; R[\"Usuarios\"]</code></pre> <p>Cada vuelta reduce incertidumbre y evita invertir en la direcci\u00f3n equivocada.</p>"},{"location":"tema1/metodologias/#los-12-principios-agrupados-para-recordar-mejor","title":"\ud83e\udde9 Los 12 principios, agrupados para recordar mejor","text":"Entrega temprana y frecuente (1, 3, 7) <p>1) Satisfacer al cliente con entregas tempranas y frecuentes. 3) Entregar software funcionando a menudo (semanas, no meses). 7) Medir el progreso por software funcionando.</p> Colaboraci\u00f3n y aprendizaje continuo (2, 4, 6, 11, 12) <p>2) Aceptar cambios incluso tarde. 4) Negocio y desarrollo juntos a diario. 6) Conversaci\u00f3n cara a cara (o remoto equivalente). 11) Equipos autoorganizados. 12) Inspecci\u00f3n y adaptaci\u00f3n peri\u00f3dicas (retros).</p> Calidad y sostenibilidad (5, 8, 9, 10) <p>5) Personas motivadas y confiables. 8) Ritmo sostenible. 9) Excelencia t\u00e9cnica y buen dise\u00f1o. 10) Simplicidad: maximizar el trabajo no hecho.</p>"},{"location":"tema1/metodologias/#62-scrum-roles-artefactos-eventos-dordod","title":"\ud83e\udde9 6.2 Scrum: roles, artefactos, eventos; DoR/DoD","text":"<p>Scrum es un marco ligero para resolver problemas complejos entregando en iteraciones con objetivo.</p> <p></p> <p>Descarga de diapositivas</p> <p>Descarga las diapositivas</p>"},{"location":"tema1/metodologias/#roles","title":"\ud83d\udc65 Roles","text":"<ul> <li>Product Owner (PO): define Product Goal, prioriza el Product Backlog y maximiza valor.  </li> <li>Scrum Master (SM): facilita Scrum, elimina impedimentos y promueve mejora.  </li> <li>Equipo de desarrollo: multidisciplinar y autoorganizado, construye el Incremento.</li> </ul>"},{"location":"tema1/metodologias/#artefactos","title":"\ud83d\udce6 Artefactos","text":"<ul> <li>Product Backlog (PB): lista ordenada por valor (historias, \u00e9picas, bugs).  </li> <li>Sprint Backlog (SB): selecci\u00f3n para el sprint + Sprint Goal + plan.  </li> <li>Incremento: suma de PB terminado al final del sprint y potencialmente liberable.</li> </ul> <p>Transparencia: cada artefacto incluye medidas de calidad (DoD) y, opcionalmente, m\u00e9tricas de previsibilidad (p. ej., forecast).</p>"},{"location":"tema1/metodologias/#eventos-time-boxes-tipicos-con-sprint-de-2-semanas","title":"\ud83d\uddd3\ufe0f Eventos (time-boxes t\u00edpicos con sprint de 2 semanas)","text":"<ul> <li>Sprint (2 semanas): contenedor de todo lo dem\u00e1s.  </li> <li>Sprint Planning (\u2248 4 h): qu\u00e9 (objetivo), por qu\u00e9 (valor) y c\u00f3mo (plan inicial).  </li> <li>Daily Scrum (15 min): sincronizaci\u00f3n y plan del d\u00eda (no es reporte al jefe).  </li> <li>Sprint Review (\u2248 2 h): mostrar Incremento y adaptar el PB con stakeholders.  </li> <li>Retrospective (\u2248 1.5 h): mejora del proceso, personas y herramientas.  </li> <li>Refinement (actividad continua): detallar PB (no es evento formal en la gu\u00eda).</li> </ul> <pre><code>flowchart LR\n  PB[Product Backlog] -- Refinamiento --&gt; SB[Sprint Backlog]\n  SB --&gt; DEV[Trabajo diario]\n  DEV --&gt; INC[Incremento&lt;br/&gt;+ DoD]\n  INC --&gt; REV[Review]\n  REV --&gt; PB\n  DEV --&gt; RETRO[Retrospective] --&gt; SB</code></pre>"},{"location":"tema1/metodologias/#dor-dod-definition-of-ready-definition-of-done","title":"\u2705 DoR / DoD (Definition of Ready / Definition of Done)","text":"<ul> <li> <p>DoR (lista para entrar al sprint): </p> <ul> <li>Historia clara (Como/Quiero/Para), criterios de aceptaci\u00f3n, valor entendido, estimaci\u00f3n aproximada, dependencias visibles.</li> </ul> </li> <li> <p>DoD (terminado de verdad): </p> <ul> <li>C\u00f3digo mergeado, tests pasados, revisi\u00f3n realizada, documentaci\u00f3n m\u00ednima actualizada, desplegable (incremento potencialmente liberable).</li> </ul> </li> </ul> <p>Tip: DoR/DoD son pol\u00edticas del equipo; rev\u00edsalas cuando la realidad cambie.</p>"},{"location":"tema1/metodologias/#63-kanban","title":"\ud83e\uddf7 6.3 Kanban","text":"<p>Kanban gestiona el flujo de trabajo y mejora la capacidad de entrega con pol\u00edticas expl\u00edcitas y l\u00edmites WIP (Work In Progress).</p> <pre><code>graph LR\n  T[\"Por hacer\"] --&gt; E[\"En curso (WIP 3)\"]\n  E --&gt; R[\"Revisi\u00f3n / QA (WIP 2)\"]\n  R --&gt; H[\"Hecho\"]</code></pre>"},{"location":"tema1/metodologias/#reglas-minimas","title":"Reglas m\u00ednimas","text":"<ul> <li>Visualiza el flujo (tablero simple To-Do / En curso / Revisar / Hecho).  </li> <li>Define pol\u00edticas de movimiento entre columnas.  </li> <li>Limita WIP (m\u00e1ximo de tareas simult\u00e1neas por columna/equipo).</li> </ul>"},{"location":"tema1/metodologias/#64-xp-tdd-pair-programming-refactorizacion-continua","title":"\ud83d\udee0\ufe0f 6.4 XP: TDD, pair programming, refactorizaci\u00f3n continua","text":"<p>Idea clave: XP = excelencia t\u00e9cnica para cambiar con seguridad: tests primero, c\u00f3digo simple, revisiones constantes y entregas peque\u00f1as.</p>"},{"location":"tema1/metodologias/#practicas-esenciales-de-un-vistazo","title":"\ud83d\udd29 Pr\u00e1cticas esenciales (de un vistazo)","text":"<ul> <li> <p> TDD (Test-Driven Development)</p> <ul> <li>Escribe una prueba que falla \u2192 c\u00f3digo m\u00ednimo \u2192 refactor sin romper.</li> <li>Beneficio: dise\u00f1o limpio y feedback r\u00e1pido.</li> </ul> </li> <li> <p> Pair programming</p> <ul> <li>Dos personas, un teclado: Driver (teclea) / Navigator (piensa estrategia).</li> <li>Alterna roles y usa Ping-Pong TDD (test \u2194 c\u00f3digo).</li> </ul> </li> <li> <p> Refactorizaci\u00f3n continua</p> <ul> <li>Mejora nombres, duplicidades y acoplamientos sin cambiar comportamiento.</li> <li>Apoya en tests para moverte con seguridad.</li> </ul> </li> <li> <p> Integraci\u00f3n continua (CI)</p> <ul> <li>Commits peque\u00f1os \u2192 build + tests + an\u00e1lisis est\u00e1tico siempre verdes.</li> <li>Evita ramas largas; integra a diario.</li> </ul> </li> <li> <p> Propiedad colectiva</p> <ul> <li>El c\u00f3digo es del equipo (no de una persona). Est\u00e1ndares, lint, DoD.</li> </ul> </li> </ul>"},{"location":"tema1/metodologias/#tdd-en-10-segundos","title":"\ud83d\udd01 TDD en 10 segundos","text":"<pre><code>flowchart LR\n  R[RED: prueba falla] --&gt; G[GREEN: c\u00f3digo m\u00ednimo]\n  G --&gt; F[REFACTOR: mejorar dise\u00f1o]\n  F --&gt; R[RED: nueva prueba falla]</code></pre> Mini\u2011ejemplo (Java) Primero la prueba (roja) \u2192 luego el c\u00f3digo (verde) \u2192 por \u00faltimo, refactor. Java<pre><code>// RED: test falla\n@Test void totalConIVA() {\n  assertEquals(121.0, Precio.conIVA(100.0, 0.21));\n}\n\n// GREEN: implementaci\u00f3n m\u00ednima\nclass Precio {\n  static double conIVA(double base, double iva) { return base * (1 + iva); }\n}\n\n// REFACTOR: nombres y redondeo\nstatic double conIVA(double base, double iva) {\n  return Math.round(base * (1 + iva) * 100.0) / 100.0;\n}\n</code></pre>"},{"location":"tema1/metodologias/#modos-de-pair-programming","title":"\ud83d\udc65 Modos de pair programming","text":"<ul> <li>Driver/Navigator: alterna cada 15\u201320 min o por test.</li> <li>Ping\u2011Pong TDD: A escribe test \u2192 B lo hace pasar \u2192 B escribe test \u2192 A lo hace pasar\u2026</li> <li>Strong\u2011Style: quien tiene la idea, no teclea (obliga a explicar el dise\u00f1o).</li> <li>Mob (3+): \u00fatil en piezas complejas; temporizador y turnos cortos.</li> </ul> <p>Consejos pr\u00e1cticos</p> <ul> <li>Acuerda un estilo de commits (at\u00f3micos, mensaje claro).</li> <li>Usa un timer para los relevos (p. ej., 15 min).</li> <li>Checklist breve de revisi\u00f3n al cerrar la sesi\u00f3n de pair.</li> </ul>"},{"location":"tema1/metodologias/#65-lean-software-development-y-waste","title":"\u267b\ufe0f 6.5 Lean Software Development y waste","text":"<p>Idea clave: Lean = eliminar desperdicio, aprender r\u00e1pido y optimizar el sistema de extremo a extremo para entregar valor continuo.</p>"},{"location":"tema1/metodologias/#principios-lean-aterrizados-a-software","title":"\ud83e\udded Principios Lean (aterrizados a software)","text":"<ul> <li> <p> Eliminar desperdicio</p> <ul> <li>Quita lo que no aporta valor al usuario (colas, burocracia, re-trabajo).</li> </ul> </li> <li> <p> Calidad desde el origen</p> <ul> <li>Tests automatizados, linters, pairing y CI; \u201cpara la l\u00ednea\u201d si falla (andon).</li> </ul> </li> <li> <p> Aprender y mejorar</p> <ul> <li>Entregas peque\u00f1as + m\u00e9tricas \u2192 feedback r\u00e1pido \u2192 ajuste del plan.</li> </ul> </li> <li> <p> Decidir tarde, entregar pronto</p> <ul> <li>Mant\u00e9n opciones abiertas y compromete cuando hay datos; feature flags y canary.</li> </ul> </li> <li> <p> Respeto por las personas</p> <ul> <li>Equipos multifuncionales y autonom\u00eda para mejorar el flujo.</li> </ul> </li> <li> <p> Optimizar el todo</p> <ul> <li>Mira el flujo end-to-end (no s\u00f3lo \u201cmi m\u00f3dulo\u201d). </li> </ul> </li> </ul>"},{"location":"tema1/metodologias/#los-7-desperdicios-y-como-cazarlos","title":"\ud83d\uddd1\ufe0f Los 7 desperdicios (y c\u00f3mo cazarlos)","text":"Desperdicio (Lean) En software Se\u00f1al de alarma Contra\u2011medida r\u00e1pida Trabajo parcialmente hecho Ramas eternas, features a medias Mucho \u201cEn curso\u201d WIP bajo, feature flags, entregas peque\u00f1as Funcionalidad extra Oro molido que nadie usa Uso bajo de nuevas features Descubrir primero (MVP), medir adopci\u00f3n Reaprendizajes/transferencias Handoffs innecesarios Muchas idas y vueltas Equipos multifuncionales, DoR claro Cambios de tarea Multitarea Context switching alto Lotes peque\u00f1os, foco por sprint/kanban Esperas Aprobaciones, entornos, terceros Tareas \u201cbloqueadas\u201d Pol\u00edticas expl\u00edcitas, self\u2011service de entornos Defectos Bugs y retrabajo Alto % de retrabajo TDD, shift\u2011left (QA temprano) Procesos extra Burocracia que no a\u00f1ade valor Mucho papeleo Simplificar workflow, automatizar Talento infrautilizado (a\u00f1adido com\u00fan en software) Personas sin voz Ideas se pierden Retro efectiva, Kaizen con acciones"},{"location":"tema1/metodologias/#66-herramientas-agiles-tableros","title":"\ud83e\uddf0 6.6 Herramientas \u00e1giles: tableros","text":"<p>Objetivo: que el tablero haga fluir el trabajo (reglas claras, l\u00edmites de trabajo y m\u00e9tricas).</p>"},{"location":"tema1/metodologias/#tableros-cuando-usar-cada-uno","title":"\ud83d\uddc2\ufe0f Tableros (cu\u00e1ndo usar cada uno)","text":"<p>Jira </p> <ul> <li>\u00datil para: equipos grandes o con procesos formales.  </li> <li>Ventajas: permisos detallados, estados a medida, automatizaciones.  </li> </ul> <p>Trello </p> <ul> <li>\u00datil para: equipos peque\u00f1os, formaci\u00f3n y proyectos ligeros.  </li> <li>Ventajas: muy visual y f\u00e1cil de empezar; listas y checklists.  </li> </ul> <p>GitHub Projects </p> <ul> <li>\u00datil si ya usas GitHub para el c\u00f3digo. Conecta tareas con issues (incidencias) y pull requests (solicitudes de cambio).  </li> <li>Ventajas: trazabilidad t\u00e9cnica natural; vistas por tabla, tablero y cronograma.  </li> </ul>"},{"location":"tema1/metodologias/#plantilla-de-columnas-sirve-en-cualquier-herramienta","title":"\ud83e\uddf1 Plantilla de columnas (sirve en cualquier herramienta)","text":"<ul> <li><code>Por hacer \u2192 En curso (WIP n) \u2192 Revisar/QA (WIP m) \u2192 Hecho</code></li> </ul> <pre><code>flowchart LR\n  T[\"Por hacer\"] --&gt; E[\"En curso (WIP 3)\"]\n  E --&gt; Q[\"Revisar / QA (WIP 2)\"]\n  Q --&gt; H[\"Hecho\"]</code></pre> Pista: deja visibles los l\u00edmites WIP (cu\u00e1ntas tarjetas caben) y revisa cuellos de botella cada semana. <p>Pol\u00edticas claras (ejemplo m\u00ednimo) </p> <ul> <li>A En curso \u21d2 hay capacidad libre y la tarjeta cumple DoR (est\u00e1 entendida y acotada).  </li> <li>A Revisar/QA \u21d2 hay pull request, pruebas en verde y lint pasado.  </li> <li>A Hecho \u21d2 cumple DoD (fusionado, probado, documentaci\u00f3n m\u00ednima, flag si aplica).</li> </ul>"},{"location":"tema1/metodologias/#metricas-que-deberia-emitir-tu-tablero","title":"\ud83d\udcca M\u00e9tricas que deber\u00eda \u201cemitir\u201d tu tablero","text":"<ul> <li>Lead time (desde que se pide algo hasta Hecho).  </li> <li>Cycle time (desde que empieza hasta Hecho).  </li> <li>Throughput (cu\u00e1ntas tarjetas se terminan por semana).  </li> <li>% de tarjetas bloqueadas y tiempo bloqueado.  </li> <li>CFD (Cumulative Flow Diagram = diagrama de flujo acumulado) para ver estabilidad.</li> </ul> <p>Rutina semanal (15\u2019): revisi\u00f3n de salud del flujo</p> <ul> <li>Mira el CFD, columnas con WIP alto, motivos de bloqueo y acordad 1 acci\u00f3n de mejora.</li> </ul>"},{"location":"tema1/uso-jira/","title":"Uso de Jira","text":"<p>\ud83d\udcd8 Gu\u00eda de uso de Jira con Scrum</p> <p>Objetivo: que puedas organizar, planificar y ejecutar Scrum en Jira Cloud con seguridad.  </p>"},{"location":"tema1/uso-jira/#0-conceptos-clave-antes-de-tocar-jira","title":"0) Conceptos clave (antes de tocar Jira)","text":""},{"location":"tema1/uso-jira/#roles-scrum-muy-breve","title":"Roles Scrum (muy breve)","text":"<ul> <li>Product Owner (PO): prioriza valor y cuida el Product Backlog.  </li> <li>Scrum Master (SM): ayuda a que el marco funcione; elimina impedimentos.  </li> <li>Equipo (Desarrollo/Producto): multidisciplinar; construye el Incremento.</li> </ul>"},{"location":"tema1/uso-jira/#epica-historia-tarea-error","title":"\u00c9pica, Historia, Tarea, Error","text":"<ul> <li>\u00c9pica: bloque grande de valor que agrupa varias historias (p. ej., \u201cPago\u201d). Dura varios sprints.  </li> <li>Historia de usuario: necesidad desde la perspectiva de la persona usuaria. Debe caber en un sprint.  </li> <li>Tarea (Task): trabajo t\u00e9cnico o de soporte que no es visto por la persona usuaria (p. ej., \u201cconfigurar CI\u201d).  </li> <li>Error (Bug): defecto que hay que corregir.</li> </ul> <p>Plantilla de Historia (f\u00e1cil de recordar) </p> <p>Como <code>&lt;tipo de persona&gt;</code>, quiero <code>&lt;acci\u00f3n&gt;</code>, para <code>&lt;beneficio&gt;</code>.</p> <p>Criterios de aceptaci\u00f3n (Given/When/Then, en castellano) </p> <ul> <li>Dado un contexto inicial (Given)  </li> <li>Cuando hago una acci\u00f3n (When)  </li> <li>Entonces ocurre un resultado observable (Then)</li> </ul> <p>Ejemplo </p>Gherkin<pre><code>Historia: Recuperar contrase\u00f1a\n  Como cliente\n  Quiero restablecer mi contrase\u00f1a\n  Para recuperar el acceso si la olvido\n\nCriterios de aceptaci\u00f3n:\n  Dado que estoy en \"Olvid\u00e9 mi contrase\u00f1a\"\n  Cuando introduzco mi email y confirmo\n  Entonces recibo un enlace v\u00e1lido 30 minutos\n  Y al usarlo puedo establecer una contrase\u00f1a nueva\n</code></pre> <p>Story points (puntos de historia) </p> <ul> <li>Medida relativa de esfuerzo/complejidad (no horas) que se estima que cuesta una tarea. Se suele utilizar la escala de Fibonacci: 1\u20132\u20133\u20135\u20138.  </li> <li>Se estiman con Planning Poker y sirven para calcular capacidad del sprint.</li> </ul>"},{"location":"tema1/uso-jira/#1-crear-cuenta-y-proyecto","title":"1) Crear cuenta y proyecto","text":"<p>1) Entra en atlassian.com y crea tu cuenta. 2) Barra lateral \u2192 Proyectos \u2192 Crear proyecto. 3) Elige la plantilla Scrum \u2192 Usar plantilla. 4) Tipo: Administrado por el equipo (m\u00e1s simple). 5) Nombra el proyecto y pulsa Crear.</p> <p>\ud83d\udcf7 Capturas de selecci\u00f3n de plantilla y confirmaci\u00f3n del proyecto </p> <p></p>"},{"location":"tema1/uso-jira/#2-orientacion-de-la-interfaz","title":"2) Orientaci\u00f3n de la interfaz","text":"<ul> <li> <p>Barra superior: (zona roja) <code>Buscar</code> \ud83d\udd0e \u00b7 <code>Crear</code> \u2795 \u00b7 <code>Notificaciones</code> \ud83d\udd14 \u00b7 <code>Ayuda</code> \u2754 \u00b7 <code>Configuraci\u00f3n</code> \u2699\ufe0f \u00b7 <code>Perfil</code> \ud83d\udc64</p> </li> <li> <p>Barra lateral (zona azul): <code>Para ti</code>, <code>Recientes</code>, <code>Marcados como favoritos</code>, <code>Aplicaciones</code>, <code>Planes</code>, <code>Proyectos</code>, <code>Filtros</code>, <code>Paneles</code>, <code>Metas</code>, <code>Equipos</code>, <code>Personalizar barra lateral</code>.</p> </li> <li> <p>Pesta\u00f1as del proyecto (zona verde): <code>Resumen</code>, <code>Cronograma</code>, <code>Backlog</code>, <code>Tablero</code>, <code>Calendario</code>, <code>Lista</code>, <code>Formularios</code>, <code>Metas</code>, <code>Todas las actividades</code>, <code>C\u00f3digo</code>, <code>M\u00e1s</code>.</p> </li> </ul> <p>\ud83d\udcf7 Captura de la interfaz </p>"},{"location":"tema1/uso-jira/#3-preparar-el-producto-antes-del-sprint-1","title":"3) Preparar el producto (antes del Sprint 1)","text":""},{"location":"tema1/uso-jira/#30-miniejemplo-contexto","title":"3.0 Mini\u2011ejemplo (contexto)","text":"<ul> <li>Producto: app para gestionar adopciones.  </li> <li> <p>Roles: </p> <ul> <li>Adoptante: busca animales, env\u00eda solicitud, firma adopci\u00f3n.  </li> <li>Voluntariado: publica fichas, gestiona solicitudes, coordina visitas.  </li> <li>Coordinaci\u00f3n: aprueba adopciones y seguimiento post\u2011adopci\u00f3n.</li> </ul> </li> <li> <p>Objetivo del primer ciclo: que una persona vea la ficha de un animal y env\u00ede una solicitud.</p> </li> </ul> <p>\u00bfPor qu\u00e9 definir el ejemplo?</p> <p>Porque aclara qui\u00e9n usa el sistema y qu\u00e9 resultado buscamos en el primer Sprint. Evita historias gen\u00e9ricas o t\u00e9cnicas sin valor directo.</p>"},{"location":"tema1/uso-jira/#31-crear-epicas-por-que-y-como","title":"3.1 Crear \u00c9picas (por qu\u00e9 y c\u00f3mo)","text":"<p>Qu\u00e9 es una \u00e9pica: un bloque grande de valor que agrupa varias historias relacionadas. \u00bfPor qu\u00e9 crear \u00e9picas? </p> <ul> <li>Organizan el Product Backlog en \u00e1reas claras (evita el caos).  </li> <li>En <code>Cronograma</code> dan una l\u00ednea de tiempo legible para semanas/meses.  </li> <li>Ayudan a comunicar objetivos a perfiles no t\u00e9cnicos.</li> </ul> <p>C\u00f3mo 1. Ir a <code>Cronograma</code> \u2192 <code>Crear \u00e9pica</code>. 2. Poner nombre + descripci\u00f3n breve de valor. 3. (Opcional) A\u00f1adir fecha objetivo y dependencias.</p> <p>\u00c9picas sugeridas (adopciones) </p> <ul> <li><code>Registro y perfil de adoptante</code> </li> <li><code>Gesti\u00f3n de animales</code> (fichas, fotos, estados)  </li> <li><code>B\u00fasqueda y solicitudes</code> </li> <li><code>Evaluaci\u00f3n y visitas</code> </li> <li><code>Adopci\u00f3n y contrato</code> </li> <li><code>Seguimiento post\u2011adopci\u00f3n</code></li> <li><code>Donaciones</code> (opcional)</li> </ul> <p>\ud83d\udcf7 Cronograma con \u00e9picas creadas</p> <p></p> <p>No te olvides</p> <p>Hay que crear todas las \u00e9picas necesarias para abarcar toda la funcionalidad del software a desarrollar.</p>"},{"location":"tema1/uso-jira/#32-crear-historias-de-usuario-por-que-y-como","title":"3.2 Crear Historias de usuario (por qu\u00e9 y c\u00f3mo)","text":"<p>Qu\u00e9 es una historia: una necesidad desde la perspectiva de la persona usuaria que debe caber en un sprint.  </p> <p>\u00bfPor qu\u00e9 historias y no tareas t\u00e9cnicas? Porque describen valor observable; las tareas t\u00e9cnicas van como Subtareas para mantener trazabilidad.</p> <p>Plantilla (simple):</p> <p>Como <code>&lt;tipo de persona&gt;</code>, quiero <code>&lt;acci\u00f3n&gt;</code>, para <code>&lt;beneficio&gt;</code>.</p> <p>C\u00f3mo a\u00f1adir </p> <ol> <li>Ir a <code>Backlog</code> \u2192 <code>Crear</code> \u2192 Historia.  </li> <li>Rellenar T\u00edtulo y Descripci\u00f3n con la plantilla y criterios.  </li> <li>Completar \u00c9pica, Etiquetas (<code>ux</code>, <code>api</code>, <code>mobile</code>\u2026), Puntos de historia (si ya se estim\u00f3).</li> </ol> <p>Ejemplos (\u00e9pica \u201cB\u00fasqueda y solicitudes\u201d)</p> <p>Historia A \u2014 Enviar solicitud desde la ficha </p>Text Only<pre><code>Como adoptante\nQuiero enviar una solicitud desde la ficha de un animal\nPara que el equipo valore mi candidatura\n</code></pre> Criterios: Gherkin<pre><code>Dado que estoy en la ficha de \"Luna\"\nCuando pulso \"Solicitar adopci\u00f3n\" y env\u00edo mis datos obligatorios\nEntonces veo un mensaje de confirmaci\u00f3n\nY el voluntariado recibe la solicitud en el panel de \"Solicitudes\"\n</code></pre> <p>Historia B \u2014 Ver ficha con fotos y estado </p>Text Only<pre><code>Como adoptante\nQuiero ver la ficha completa (edad, tama\u00f1o, car\u00e1cter, fotos)\nPara decidir si encaja con mi hogar\n</code></pre> Criterios: Gherkin<pre><code>Dado que abro la ficha de un animal adoptable\nEntonces veo nombre, edad, raza/tama\u00f1o, estado, descripci\u00f3n y al menos 3 fotos\n</code></pre> <p>Si una historia no cabe en un sprint</p> <p>Div\u00eddela (p. ej., primero enviar solicitud, despu\u00e9s adjuntar documentaci\u00f3n).</p> <p>\ud83d\udcf7 Creaci\u00f3n y configuraci\u00f3n de historias en el Backlog</p> <p></p> <p></p> <p></p> <p>No te olvides</p> <p>Hay que crear todas las historias de usuario para abarcar toda la funcionalidad del software a desarrollar.</p>"},{"location":"tema1/uso-jira/#4-priorizar-y-estimar-el-product-backlog","title":"4) Priorizar y estimar el Product Backlog","text":""},{"location":"tema1/uso-jira/#41-priorizar-por-que-y-como","title":"4.1 Priorizar (por qu\u00e9 y c\u00f3mo)","text":"<p>Priorizar = entregar antes lo valioso y reducir riesgo. Ordena por:</p> <ul> <li>Valor para adoptantes/voluntariado</li> <li>Riesgo/Inc\u00f3gnita (lo incierto se aborda pronto)</li> <li>Dependencias (orden l\u00f3gico)</li> <li>Esfuerzo (si hay empates, empieza por la m\u00e1s peque\u00f1a)</li> </ul> <p>En Jira: en <code>Backlog</code>, arrastra historias; lo m\u00e1s importante arriba.</p> <p>Matriz (ejemplo app adopciones)</p> Historia (\u00c9pica) Valor Riesgo Esfuerzo (pts) \u00bfPrioridad? Ver ficha con fotos (Gesti\u00f3n de animales) Alto Bajo 3 \u2705 Alta Enviar solicitud (B\u00fasqueda y solicitudes) Alto Medio 5 \u2705 Alta Listado/B\u00fasqueda (B\u00fasqueda y solicitudes) Medio Medio 5 Media Panel de solicitudes (Evaluaci\u00f3n y visitas) Medio Medio 8 Media Adjuntar documentos (B\u00fasqueda y solicitudes) Medio Medio 5 Media <p>Selecci\u00f3n de tareas</p> <p>Resultado: para el Sprint 1 nos quedamos con Ver ficha con fotos (3 pts) y Enviar solicitud (5 pts). Total aproximado: 8 pts (ajusta seg\u00fan vuestra capacidad real).</p>"},{"location":"tema1/uso-jira/#42-estimar-con-puntos-de-historia","title":"4.2 Estimar con Puntos de historia","text":"<ul> <li>Medida relativa (no horas). Escala t\u00edpica: 1, 2, 3, 5, 8.  </li> <li>T\u00e9cnica: Planning Poker (proponer \u2192 debatir \u2192 acordar).  </li> <li>Los puntos se asignan a la historia, no a las sub\u2011tareas.</li> </ul> <p>Regla pr\u00e1ctica</p> <p>Si vuestra velocidad media ronda ~18 puntos, no planifiqu\u00e9is 35 para el sprint: saldr\u00e1 caro en trabajo arrastrado.</p> <p>En el ejemplo anterior se han seleccionado 8.</p> <p>Como equipo de trabajo, con el tiempo y la experiencia sabr\u00e9is cu\u00e1ntos puntos de historias de usuario podr\u00e9is abarcar en un sprint. </p>"},{"location":"tema1/uso-jira/#5-planificar-el-sprint-1-en-backlog","title":"5) Planificar el Sprint 1 (en Backlog)","text":"<ol> <li>En <code>Backlog</code> \u2192 Crear sprint.  </li> <li>Arrastra historias hasta vuestra capacidad.  </li> <li>Define el Objetivo de sprint (resultado, no tareas):</li> <li>Ejemplo: \u201cPermitir ver la ficha de un animal con fotos y enviar una solicitud desde la web.\u201d</li> <li>Define la duraci\u00f3n del Sprint.</li> <li>A\u00f1ade Subtareas t\u00e9cnicas dentro de cada historia (UI, API, pruebas, contenido).</li> </ol> <p>Modelo de Objetivo (copia/pega) </p>Text Only<pre><code>Resultado: &lt;qu\u00e9 cambia para la persona usuaria&gt;\nSe\u00f1al de \u00e9xito: &lt;m\u00e9trica/umbral&gt;\nHistorias: &lt;Jira-123&gt;, &lt;Jira-124&gt;\n</code></pre> <p>Subtareas sugeridas (Historia \u201cEnviar solicitud\u201d)</p> <ul> <li>UI: formulario y validaci\u00f3n b\u00e1sica</li> <li>API: endpoint POST /solicitudes</li> <li>Base de datos: esquema y tabla \u201csolicitudes\u201d</li> <li>QA: casos de prueba (criterios Given/When/Then)</li> </ul> <p>\ud83d\udcf7 Creaci\u00f3n y configuraci\u00f3n del Sprint</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"tema1/uso-jira/#6-iniciar-y-trabajar-el-sprint-tablero","title":"6) Iniciar y trabajar el sprint (Tablero)","text":""},{"location":"tema1/uso-jira/#61-arrancar","title":"6.1 Arrancar","text":"<p>Pulsa Iniciar sprint \u2192 ve a Tablero.</p>"},{"location":"tema1/uso-jira/#62-flujo-y-wip","title":"6.2 Flujo y WIP","text":"<p>Columnas simples: <code>Por hacer</code> \u2192 <code>En curso</code> \u2192 <code>Revisar/QA</code> \u2192 <code>Hecho</code>(Si no aparece alguna columna a\u00f1adela)  </p> <p>WIP acordado: En curso \u2264 3, Revisar/QA \u2264 2 (Recuerda que es importante establecer un m\u00e1ximo por columna).</p> <p>Para ver las subtareas</p> <p>Para ver en el tablero las subtareas tendr\u00e1s que cambiar el modo de vista de Grupo a Subtarea.</p> <p></p> <p>Pol\u00edticas m\u00ednimas</p> <ul> <li>A En curso \u21d2 cumple DoR + hay capacidad.  </li> <li>A Revisar/QA \u21d2 PR abierto + tests en verde + lint ok.  </li> <li>A Hecho \u21d2 cumple DoD (terminado de verdad).</li> </ul>"},{"location":"tema1/uso-jira/#7-seguimiento-del-sprint","title":"7) Seguimiento del sprint","text":"<p>Durante el Sprint</p> <p>Podr\u00e1s modificar el estado de una tarea y qu\u00e9 persona del grupo de trabajo la tiene asignada.</p> <ul> <li>Para cambiar el estado de una tarea arrastra la tarea en el tablero.</li> <li>Para asignar a un miembro del equipo, entra en la tarea y modifica Persona asignada o selecciona el icono de la persona y elige.</li> </ul> <p></p> <p>Daily: Recuerda que cada d\u00eda se ha de hacer una reuni\u00f3n de unos 15' para hablar sobre el estado de las tareas, dificultades, etc.</p>"},{"location":"tema1/uso-jira/#8-cerrar-el-sprint-y-aprender","title":"8) Cerrar el sprint y aprender","text":"<p>\u00bfCu\u00e1ndo cerrar el Sprint?</p> <p>Recuerda que un sprint tiene una duraci\u00f3n, se tiene que cerrar al finalizar el plazo de tiempo, NO cuando las tareas se hayan finalizado.</p> <p>Si se ha realizado una buena planificaci\u00f3n y estimaci\u00f3n de las tareas deber\u00eda haber dado tiempo a finalizarlas todas.</p> <ol> <li>En Tablero \u2192 Completar sprint.  </li> <li> <p>Lo pendiente: mover a siguiente sprint o al Backlog. Depender\u00e1 de si las tareas que no te ha dado tiempo a hacer quieres hacerlas en el siguiente Sprint o quieres dejarlas en el Backlog por si hay otras tareas m\u00e1s prioritarias. Lo habitual es finalizarlas en el siguiente Sprint.</p> </li> <li> <p>Review: demo funcional de las historias \u201cVer ficha\u201d y \u201cEnviar solicitud\u201d.  </p> <ul> <li>Si el voluntariado necesita m\u00e1s campos, crea nuevas historias o ajusta las actuales.  </li> </ul> </li> <li> <p>Retrospectiva: acordad 1 mejora concreta para el siguiente sprint.  </p> <ul> <li>Ej.: \u201cDefinir datos de prueba comunes\u201d o \u201cLimitar <code>En curso</code> a 3 de verdad\u201d.</li> </ul> </li> </ol> <p>Si durante la Demo...</p> <p>Si durante la demo u otro momento aparece un Bug (error) pod\u00e9is crear una nueva tara de tipo Bug para solucionarlo en el siguiente Sprint, o en el Sprint actual si sigue en curso.</p> <p></p> <p></p> <p>Los siguientes puntos</p> <p>Como ya estudiamos en Scrum, los dos puntos anteriores hacen referencia a dos de las reuniones que se realizan durante el proceso.</p>"},{"location":"tema1/uso-jira/#9-plantillas-rapidas-para-copiarpegar","title":"9) Plantillas r\u00e1pidas (para copiar/pegar)","text":"<p>Historia de usuario </p>Text Only<pre><code>Como &lt;tipo de persona&gt;\nQuiero &lt;acci\u00f3n&gt;\nPara &lt;beneficio&gt;\n</code></pre> <p>Criterios (Given/When/Then) </p>Gherkin<pre><code>Dado &lt;contexto&gt;\nCuando &lt;acci\u00f3n&gt;\nEntonces &lt;resultado medible&gt;\n</code></pre> <p>Objetivo de sprint </p>Text Only<pre><code>Resultado: &lt;impacto para la persona usuaria&gt;\nSe\u00f1al de \u00e9xito: &lt;m\u00e9trica/umbral&gt;\nHistorias: &lt;Jira-123&gt;, &lt;Jira-124&gt;\n</code></pre>"},{"location":"tema1/uso-jira/#resumen-del-proceso-scrum-en-jira","title":"Resumen del proceso Scrum en Jira","text":"<p>De izquierda a derecha como en la imagen: qu\u00e9 ocurre y d\u00f3nde hacerlo en Jira Cloud.</p>"},{"location":"tema1/uso-jira/#product-backlog-backlog","title":"Product Backlog \u2192 (Backlog)","text":"<ul> <li>Crear \u00c9picas y Historias; vincular historia \u2194 \u00e9pica.</li> <li>A\u00f1adir criterios en Given/When/Then en la Descripci\u00f3n; adjuntar dise\u00f1os/evidencias.</li> <li>Ordenar arrastrando por valor/risgo/dependencias; etiquetar (<code>ux</code>, <code>api</code>, etc.).</li> <li>Estimar con Story points y mostrarlos en la tarjeta.</li> <li>Refinamiento continuo aqu\u00ed; dividir historias grandes antes de planificar.</li> </ul>"},{"location":"tema1/uso-jira/#sprint-planning-meeting-backlog","title":"Sprint Planning Meeting \u2192 (Backlog)","text":"<ul> <li><code>Crear sprint</code> y arrastrar s\u00f3lo lo que cabe seg\u00fan velocidad (ap\u00f3yate en Velocity de sprints previos).</li> <li>Escribir el Objetivo de Sprint en la cabecera del sprint.</li> <li>Fijar duraci\u00f3n (1\u20134 semanas).</li> <li>Dentro de cada historia, crear Subtareas (UI/API/DB/QA).</li> </ul>"},{"location":"tema1/uso-jira/#sprint-backlog-backlog-tablero","title":"Sprint Backlog \u2192 (Backlog + Tablero)","text":"<ul> <li>El Sprint Backlog es el conjunto de historias ya dentro del sprint.</li> <li>Comprobar que cada historia tiene \u00e9pica, puntos, criterios y subtareas.</li> <li>Asignaciones iniciales si procede; crear Quick filters (p. ej., Mis issues, Bloqueadas).</li> </ul>"},{"location":"tema1/uso-jira/#sprint-14-weeks-ejecucion-tablero","title":"SPRINT 1\u20134 WEEKS (Ejecuci\u00f3n) \u2192 (Tablero)","text":"<ul> <li>Trabajar en el Tablero moviendo tarjetas: <code>Por hacer \u2192 En curso \u2192 Revisar/QA \u2192 Hecho</code>.</li> <li>Respetar WIP acordado.</li> <li>Enlazar branch/PR desde el panel Development del issue.</li> </ul>"},{"location":"tema1/uso-jira/#daily-scrum-cada-24-h-tablero","title":"Daily Scrum (cada 24 h) \u2192 (Tablero)","text":"<ul> <li>Abrir el Tablero y actualizar estados/asignaciones en vivo.</li> <li>Marcar impedimentos con Flag (\u2691) y, si procede, crear issue Bloqueo.</li> <li>Reequilibrar trabajo con Quick filters y l\u00edmites de WIP.</li> </ul>"},{"location":"tema1/uso-jira/#finished-work-tablero-releases","title":"Finished Work \u2192 (Tablero + Releases)","text":"<ul> <li>Mover a Hecho s\u00f3lo con DoD cumplido.</li> <li>Asignar Fix version si us\u00e1is <code>Releases</code> para agrupar entregas.</li> <li>Adjuntar evidencias (capturas, resultados de pruebas) antes de cerrar.</li> </ul>"},{"location":"tema1/uso-jira/#sprint-review-sprint-retrospective-informes-backlog","title":"Sprint Review + Sprint Retrospective \u2192 (Informes + Backlog)","text":"<ul> <li>Convertir feedback en nuevas historias en <code>Backlog</code> y vincularlas a su \u00e9pica.</li> <li>Retro: crear 1\u20132 tareas de mejora de proceso (etiqueta <code>mejora-proceso</code>) y planificarlas en el pr\u00f3ximo sprint.</li> </ul>"},{"location":"tema1/uso-jira/#tras-finalizar-el-sprint","title":"Tras finalizar el Sprint","text":"<ul> <li>Vuelta a empezar desde el principio para enfrentarse al segundo sprint</li> </ul>"},{"location":"tema2/","title":"\ud83d\udee0\ufe0f Tema 2: Entornos Integrados de Desarrollo (IDE)","text":""},{"location":"tema2/#tema-2-entornos-integrados-de-desarrollo-ide","title":"\ud83d\udee0\ufe0f Tema 2: Entornos Integrados de Desarrollo (IDE)","text":"<p>RA 2: Eval\u00faa entornos integrados de desarrollo analizando sus caracter\u00edsticas para editar c\u00f3digo fuente y generar ejecutables.</p>"},{"location":"tema2/#criterios-de-evaluacion","title":"\ud83c\udfaf Criterios de evaluaci\u00f3n","text":"<p>\u2705 Se han instalado entornos de desarrollo, tanto propietarios como libres. \u2705 Se han a\u00f1adido y eliminado m\u00f3dulos en el entorno de desarrollo. \u2705 Se ha personalizado y automatizado el entorno de desarrollo. \u2705 Se ha configurado el sistema de actualizaci\u00f3n del entorno de desarrollo. \u2705 Se han generado ejecutables a partir de c\u00f3digo fuente de diferentes lenguajes en un mismo entorno. \u2705 Se han generado ejecutables a partir de un mismo c\u00f3digo fuente en varios entornos de desarrollo. \u2705 Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.  </p>"},{"location":"tema2/#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<ol> <li>Funciones de un entorno de desarrollo </li> <li>Instalaci\u00f3n de un entorno de desarrollo </li> <li>Uso b\u00e1sico de un entorno de desarrollo </li> <li>Personalizaci\u00f3n del entorno de desarrollo </li> <li>Edici\u00f3n de programas </li> <li>Generaci\u00f3n de ejecutables en distintos entornos </li> <li>Herramientas y automatizaci\u00f3n </li> </ol>"},{"location":"tema3/","title":"\ud83e\uddea Tema 3: Verificaci\u00f3n y Pruebas de Programas","text":""},{"location":"tema3/#tema-3-verificacion-y-pruebas-de-programas","title":"\ud83e\uddea Tema 3: Verificaci\u00f3n y Pruebas de Programas","text":"<p>RA 3: Verifica el funcionamiento de programas dise\u00f1ando y realizando pruebas.</p>"},{"location":"tema3/#criterios-de-evaluacion","title":"\ud83c\udfaf Criterios de evaluaci\u00f3n","text":"<p>\u2705 Se han identificado los diferentes tipos de pruebas. \u2705 Se han definido casos de prueba. \u2705 Se han identificado las herramientas de depuraci\u00f3n y prueba de aplicaciones ofrecidas por el entorno de desarrollo. \u2705 Se han utilizado herramientas de depuraci\u00f3n para definir puntos de ruptura y seguimiento. \u2705 Se han utilizado las herramientas de depuraci\u00f3n para examinar y modificar el comportamiento de un programa en tiempo de ejecuci\u00f3n. \u2705 Se han efectuado pruebas unitarias de clases y funciones. \u2705 Se han implementado pruebas autom\u00e1ticas. \u2705 Se han documentado las incidencias detectadas. \u2705 Se han utilizado dobles de prueba para aislar los componentes durante las pruebas.  </p>"},{"location":"tema3/#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<ol> <li>Planificaci\u00f3n de pruebas </li> <li>Tipos de pruebas: funcionales, estructurales y regresi\u00f3n </li> <li>Procedimientos y casos de prueba </li> <li>Pruebas de c\u00f3digo: cubrimiento, valores l\u00edmite y clases de equivalencia </li> <li>Pruebas unitarias y herramientas de automatizaci\u00f3n </li> <li>Documentaci\u00f3n de incidencias </li> <li>Dobles de prueba: tipos y caracter\u00edsticas </li> </ol>"},{"location":"tema4/","title":"\ud83e\uddea Tema 3: Verificaci\u00f3n y Pruebas de Programas","text":""},{"location":"tema4/#tema-3-verificacion-y-pruebas-de-programas","title":"\ud83e\uddea Tema 3: Verificaci\u00f3n y Pruebas de Programas","text":"<p>RA 3: Verifica el funcionamiento de programas dise\u00f1ando y realizando pruebas.</p>"},{"location":"tema4/#criterios-de-evaluacion","title":"\ud83c\udfaf Criterios de evaluaci\u00f3n","text":"<p>\u2705 Se han identificado los diferentes tipos de pruebas. \u2705 Se han definido casos de prueba. \u2705 Se han identificado las herramientas de depuraci\u00f3n y prueba de aplicaciones ofrecidas por el entorno de desarrollo. \u2705 Se han utilizado herramientas de depuraci\u00f3n para definir puntos de ruptura y seguimiento. \u2705 Se han utilizado las herramientas de depuraci\u00f3n para examinar y modificar el comportamiento de un programa en tiempo de ejecuci\u00f3n. \u2705 Se han efectuado pruebas unitarias de clases y funciones. \u2705 Se han implementado pruebas autom\u00e1ticas. \u2705 Se han documentado las incidencias detectadas. \u2705 Se han utilizado dobles de prueba para aislar los componentes durante las pruebas.  </p>"},{"location":"tema4/#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<ol> <li>Planificaci\u00f3n de pruebas </li> <li>Tipos de pruebas: funcionales, estructurales y regresi\u00f3n </li> <li>Procedimientos y casos de prueba </li> <li>Pruebas de c\u00f3digo: cubrimiento, valores l\u00edmite y clases de equivalencia </li> <li>Pruebas unitarias y herramientas de automatizaci\u00f3n </li> <li>Documentaci\u00f3n de incidencias </li> <li>Dobles de prueba: tipos y caracter\u00edsticas </li> </ol>"},{"location":"tema5/","title":"\ud83c\udfd7\ufe0f Tema 5: Diagramas de Clases en el Desarrollo de Aplicaciones","text":""},{"location":"tema5/#tema-5-diagramas-de-clases-en-el-desarrollo-de-aplicaciones","title":"\ud83c\udfd7\ufe0f Tema 5: Diagramas de Clases en el Desarrollo de Aplicaciones","text":"<p>RA 5: Genera diagramas de clases valorando su importancia en el desarrollo de aplicaciones y empleando herramientas espec\u00edficas.</p>"},{"location":"tema5/#criterios-de-evaluacion","title":"\ud83c\udfaf Criterios de evaluaci\u00f3n","text":"<p>\u2705 Se han identificado los conceptos b\u00e1sicos de la programaci\u00f3n orientada a objetos. \u2705 Se han utilizado herramientas para la elaboraci\u00f3n de diagramas de clases. \u2705 Se ha interpretado el significado de diagramas de clases. \u2705 Se han trazado diagramas de clases a partir de las especificaciones de las mismas. \u2705 Se ha generado c\u00f3digo a partir de un diagrama de clases. \u2705 Se ha generado un diagrama de clases mediante ingenier\u00eda inversa.  </p>"},{"location":"tema5/#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<ol> <li>Conceptos b\u00e1sicos de la POO: clases, atributos y m\u00e9todos </li> <li>Objetos e instanciaci\u00f3n </li> <li>Relaciones en diagramas de clases </li> <li>Notaci\u00f3n de los diagramas de clases </li> <li>Herramientas para la elaboraci\u00f3n de diagramas </li> <li>Generaci\u00f3n autom\u00e1tica de c\u00f3digo </li> <li>Ingenier\u00eda inversa: de c\u00f3digo a diagrama </li> </ol>"},{"location":"tema6/","title":"\ud83d\udd04 Tema 6: Diagramas de Comportamiento en el Desarrollo de Aplicaciones","text":""},{"location":"tema6/#tema-6-diagramas-de-comportamiento-en-el-desarrollo-de-aplicaciones","title":"\ud83d\udd04 Tema 6: Diagramas de Comportamiento en el Desarrollo de Aplicaciones","text":"<p>RA 6: Genera diagramas de comportamiento valorando su importancia en el desarrollo de aplicaciones y empleando herramientas espec\u00edficas.</p>"},{"location":"tema6/#criterios-de-evaluacion","title":"\ud83c\udfaf Criterios de evaluaci\u00f3n","text":"<p>\u2705 Se han identificado los distintos tipos de diagramas de comportamiento. \u2705 Se ha reconocido el significado de los diagramas de casos de uso. \u2705 Se han interpretado diagramas de interacci\u00f3n. \u2705 Se han elaborado diagramas de interacci\u00f3n sencillos. \u2705 Se ha interpretado el significado de diagramas de actividades. \u2705 Se han elaborado diagramas de actividades sencillos. \u2705 Se han interpretado diagramas de estados. \u2705 Se han planteado diagramas de estados sencillos.  </p>"},{"location":"tema6/#indice-de-contenidos","title":"\ud83d\udcd8 \u00cdndice de contenidos","text":"<ol> <li>Tipos de diagramas de comportamiento y campo de aplicaci\u00f3n </li> <li>Diagrama de casos de uso: actores, escenarios y comunicaci\u00f3n </li> <li>Diagramas de interacci\u00f3n </li> <li>Diagrama de secuencia </li> <li>Diagrama de comunicaci\u00f3n </li> <li>Diagrama de actividades </li> <li>Diagrama de estados </li> </ol>"}]}